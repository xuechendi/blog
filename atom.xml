<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[XueChendi]]></title>
  <link href="http://xuechendi.github.io/atom.xml" rel="self"/>
  <link href="http://xuechendi.github.io/"/>
  <updated>2014-08-21T08:06:47+08:00</updated>
  <id>http://xuechendi.github.io/</id>
  <author>
    <name><![CDATA[Chendi.Xue]]></name>
    <email><![CDATA[xuechendi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VM Creation by Virsh-part2]]></title>
    <link href="http://xuechendi.github.io/blog/2014/08/21/vm-creation-by-virsh-part2/"/>
    <updated>2014-08-21T07:53:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2014/08/21/vm-creation-by-virsh-part2</id>
    <content type="html"><![CDATA[<p>I have post a blog on how to create VM, but actually that is barely enough to create a VM by all possible initial system environment.
So in this post, I will concludes all problem I ran into before, hope to provide some debug/troubleshoot advise for who also struggles in building VM.</p>

<p>This post will covers:</p>

<ol>
<li><p>Why my vnc client on mac flashing close the connection.</p></li>
<li><p>Why I got unknown os type &ldquo;hvm&rdquo; error message</p></li>
<li><p>Differences between ixgbe versions</p></li>
<li><p>Extra: What I do when ran into error</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build your own VPN server]]></title>
    <link href="http://xuechendi.github.io/blog/2014/08/21/build-your-own-vpn-server/"/>
    <updated>2014-08-21T07:49:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2014/08/21/build-your-own-vpn-server</id>
    <content type="html"><![CDATA[<p>This post is practised one year ago on how to build my own VPN on amazon EC2, original version is completed in Chinese, I will translate it into English and post here later</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ceph WBThrottle ?]]></title>
    <link href="http://xuechendi.github.io/blog/2014/08/15/ceph-wbthrottle/"/>
    <updated>2014-08-15T04:27:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2014/08/15/ceph-wbthrottle</id>
    <content type="html"><![CDATA[<h1> Try on my desktop </h1>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How much we can see from what we are listening]]></title>
    <link href="http://xuechendi.github.io/blog/2014/04/23/how-much-we-can-see-from-what-we-arelistening/"/>
    <updated>2014-04-23T13:01:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2014/04/23/how-much-we-can-see-from-what-we-arelistening</id>
    <content type="html"><![CDATA[<p>Just write this post to see(literally see) how much differences there are in a compressed mp3 with lossless FLAC and WAV.</p>

<p>I compared two sessions in TIME(from 《inception》 OST) with three compressed version:</p>

<pre><code>44.1kHZ       MP3   184kbps
44.1KHZ 16bit FLAC  608kbps VBR
44.1kHZ 16bit WAV   1141kbps
</code></pre>

<p>First bite:
mp3
<img src="http://xuechendi.github.io/images/mp3flacwav/session1_mp3.png" alt="session1_mp3" /></p>

<p>flac
<img src="http://xuechendi.github.io/images/mp3flacwav/session1_flac.png" alt="session1_flac" /></p>

<p>wav
<img src="http://xuechendi.github.io/images/mp3flacwav/session1_wav.png" alt="session1_wav" /></p>

<p>Hum&hellip;I swear they are three different screen snapshot&hellip; But I did barely see no difference from those waves&hellip; Dead eyes&hellip;</p>

<p>So, maybe I should find some session more dynamic, and I choose the the first rise in TIME, see below</p>

<p>mp3
<img src="http://xuechendi.github.io/images/mp3flacwav/session2_mp3.png" alt="session2_mp3" /></p>

<p>flac
<img src="http://xuechendi.github.io/images/mp3flacwav/session2_flac.png" alt="session2_flac" /></p>

<p>wav
<img src="http://xuechendi.github.io/images/mp3flacwav/session2_wav.png" alt="session2_wav" /></p>

<p>Er&hellip; still nothing? Look closer&hellip;</p>

<p>mp3
<img src="http://xuechendi.github.io/images/mp3flacwav/session2_1_mp3.png" alt="session2_1_mp3" /></p>

<p>flac
<img src="http://xuechendi.github.io/images/mp3flacwav/session2_1_flac.png" alt="session2_1_flac" /></p>

<p>wav
<img src="http://xuechendi.github.io/images/mp3flacwav/session2_1_wav.png" alt="session2_1_wav" /></p>

<p>put the waves together</p>

<p>MP3 vs WAV: mp3(red line), wav(green line)
<img src="http://xuechendi.github.io/images/mp3flacwav/3.jpg" alt="mp3_wav" /></p>

<p>FLAC vs WAV:flac(red line),wav(green line)
<img src="http://xuechendi.github.io/images/mp3flacwav/3.jpg" alt="flac_wav" /></p>

<p>closer&hellip;
300x MP3 vs WAV: mp3(red line), wav(green line)
<img src="http://xuechendi.github.io/images/mp3flacwav/4.jpg" alt="mp3_wav" /></p>

<p>300x FLAC vs WAV:flac(red line),wav(green line)
<img src="http://xuechendi.github.io/images/mp3flacwav/5.jpg" alt="flac_wav" /></p>

<p>Yes! There does have some differences between mp3 with wav!!!
And it&rsquo;s so apparently mp3 lost some tops and bottoms&hellip;</p>

<p>Seems I spend another 500% disk space for wav versions does worth something!!! Yep&hellip;</p>

<p>But Flac is nearly 50% space occupation of WAV&hellip;
Still feels like listening to WAV. Er&hellip;.</p>

<p>Don&rsquo;t ask me if I can hear the difference between all these version&hellip; That&rsquo;s what I&rsquo;ll never tell&hellip; XOXO, geek girl</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dive into Ceph Write IO Path]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/18/dive-into-ceph-write-io-path/"/>
    <updated>2013-12-18T14:41:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/18/dive-into-ceph-write-io-path</id>
    <content type="html"><![CDATA[<p><em>After talking with a friend of mine who is really intelligent and awesome and intelligent, just thinking about to post this article to get through the Ceph OSD Write IO path. There I am sorry to say must exists some misunderstanding in this article, but I hope it will still means something for people who read this article&hellip;</em></p>

<p><em>Ok, start here.</em></p>

<p>======</p>

<p>There is a IO path graph on ceph.com, pls click <code><a href="http://ceph.com/docs/master/dev/osd_internals/osd_throttles/?highlight=wbthrottle">OSD Internals</a></code>, I find the graph is a bit difficult to see, so redraw it in a vertical way</p>

<div style="float:left;">
<div style="float:left; width:58%;">
    <div style="border-left:red solid 5px; padding-left:5%; ">
    <p>**Pipe::Reader** call the function DispatchQueue::enqueue, put the msg into mqueue</p>
    <p>**DispatchThread** loops in getting msg from mqueue and dispatch the msg to who is able to handle( msgr->ms_deliver_dispatch(m), in this case, OSD::ms_dispatch(m) will be called then )<p>
    </div>
    <br>
    <div style="border-left:green solid 5px; padding-left:5%;">
    <p>**OSD::_dispatch** switch (msg->type), in this case, would be &#8220;CEPH_MSG_OSD_OP&#8221;, call handle_op(op) </p>
    <p>**handle_op** do some preparation before actually applying this op, includes refresh the map, check the obj name and data, remaining space, then it cal the pgid and lock the pg, call enqueue_op to put the op into osd->op_wq with pgid and op. </p>
    <p>**worker wq** ThreadPool::worker loops all the time to join_old_threads, then dequeue any items in the workqueue, by now, that would be our write op. Then work_queue start to process this op request by OSD::OpWQ::_process function, then OSD::dequeue_op function, and do_request. After dequeue, the pg lock is then released.</p>
    </div>
</div>

<img src="http://xuechendi.github.io/images/ceph_write_path/io_path_1.png" style="margin-left:5%; width:35%; border:5px solid #222; float:left;">
</div>


<br>


<div style="width:100%; float:left; border-left:#00FFFF solid 5px; padding-left:5%; font-size:10px;">
    <p>**do_request** Seems it calls the do_request implemented in ReplicatedPG.cc, then calls do_op(op) also implemented in ReplicatedPG.cc.</p>
    <p>**do_op** 
</p>
</div>


<br>


<br>


<p>Below are the logs :</p>

<p><div style="float:left; font-size:12px;  border: solid #999 1px; background-color: #eee; width:100%; overflow: scroll; padding:5px; white-space:nowrap;text-overflow:scroll;">
<br>root@MPXDELL2:~# tail -f /var/log/ceph/osd.15.log  | grep &ldquo;dispatch\|queue_op\|<red>worker</red>&rdquo;
<br>2013-12-18 19:42:51.999692 7f2c9e790700 20 osd.15 267 <red><em>dispatch</red> 0x23d6000 osd_op(client.5722.0:4 rbd_header.10126b8b4567 [call rbd.get_size,call rbd.get_object_prefix] 3.fa956e77 e267) v4
<br>2013-12-18 19:42:51.999748 7f2c9e790700 15 osd.15 267 <red><red>enqueue_op</red></red> 0x2aa9bc40 prio 63 cost 39 latency 0.000151 osd_op(client.5722.0:4 rbd_header.10126b8b4567 [call rbd.get_size,call rbd.get_object_prefix] 3.fa956e77 e267) v4
<br>2013-12-18 19:42:51.999814 7f2c8d76e700 12 OSD::op_tp <red>worker</red> wq OSD::OpWQ start processing 0x1 (1 active)
<br>2013-12-18 19:42:51.999824 7f2c8d76e700 10 osd.15 267 <red>dequeue_op</red> 0x2aa9bc40 prio 63 cost 39 latency 0.000228 osd_op(client.5722.0:4 rbd_header.10126b8b4567 [call rbd.get_size,call rbd.get_object_prefix] 3.fa956e77 e267) v4 pg pg[3.e77( v 267&#8217;732 (0&#8217;0,267&#8217;732] local-les=267 n=2 ec=15 les/c 267/267 266/266/266) [15] r=0 lpr=266 mlcod 267&#8217;732 active+clean]
<br>2013-12-18 19:42:52.000519 7f2c8d76e700 10 osd.15 267 <red>dequeue_op</red> 0x2aa9bc40 finish
<br>2013-12-18 19:42:52.000535 7f2c8d76e700 15 OSD::op_tp <red>worker</red> wq OSD::OpWQ done processing 0x1 (0 active)
<br>2013-12-18 19:42:52.001161 7f2c9e790700 20 osd.15 267 <red></em>dispatch</red> 0x23d6480 osd_op(client.5722.0:5 rbd_header.10126b8b4567 [call rbd.get_stripe_unit_count] 3.fa956e77 e267) v4
<br>2013-12-18 19:42:52.001188 7f2c9e790700 15 osd.15 267 <red><red>enqueue_op</red></red> 0x2aa9bb60 prio 63 cost 24 latency 0.000107 osd_op(client.5722.0:5 rbd_header.10126b8b4567 [call rbd.get_stripe_unit_count] 3.fa956e77 e267) v4
<br>2013-12-18 19:42:52.001213 7f2c8af69700 12 OSD::op_tp <red>worker</red> wq OSD::OpWQ start processing 0x1 (1 active)
<br>2013-12-18 19:42:52.001230 7f2c8af69700 10 osd.15 267 <red>dequeue_op</red> 0x2aa9bb60 prio 63 cost 24 latency 0.000148 osd_op(client.5722.0:5 rbd_header.10126b8b4567 [call rbd.get_stripe_unit_count] 3.fa956e77 e267) v4 pg pg[3.e77( v 267&#8217;732 (0&#8217;0,267&#8217;732] local-les=267 n=2 ec=15 les/c 267/267 266/266/266) [15] r=0 lpr=266 mlcod 267&#8217;732 active+clean]
<br>2013-12-18 19:42:52.001615 7f2c8af69700 10 osd.15 267 <red>dequeue_op</red> 0x2aa9bb60 finish
<br>2013-12-18 19:42:52.001627 7f2c8af69700 15 OSD::op_tp <red>worker</red> wq OSD::OpWQ done processing 0x1 (0 active)
<br>2013-12-18 19:42:52.002200 7f2c9e790700 20 osd.15 267 <red><em>dispatch</red> 0x23d6240 osd_op(client.5722.0:6 rbd_header.10126b8b4567 [watch add cookie 1 ver 0] 3.fa956e77 e267) v4
<br>2013-12-18 19:42:52.002223 7f2c9e790700 15 osd.15 267 <red><red>enqueue_op</red></red> 0x2aa9ba80 prio 63 cost 0 latency 0.000099 osd_op(client.5722.0:6 rbd_header.10126b8b4567 [watch add cookie 1 ver 0] 3.fa956e77 e267) v4
<br>2013-12-18 19:42:52.002275 7f2c8ff73700 12 OSD::op_tp <red>worker</red> wq OSD::OpWQ start processing 0x1 (1 active)
<br>2013-12-18 19:42:52.002293 7f2c8ff73700 10 osd.15 267 <red>dequeue_op</red> 0x2aa9ba80 prio 63 cost 0 latency 0.000169 osd_op(client.5722.0:6 rbd_header.10126b8b4567 [watch add cookie 1 ver 0] 3.fa956e77 e267) v4 pg pg[3.e77( v 267&#8217;732 (0&#8217;0,267&#8217;732] local-les=267 n=2 ec=15 les/c 267/267 266/266/266) [15] r=0 lpr=266 mlcod 267&#8217;732 active+clean]
<br>2013-12-18 19:42:52.002800 7f2c8ff73700 10 osd.15 267 <red>dequeue_op</red> 0x2aa9ba80 finish
<br>2013-12-18 19:42:52.002805 7f2c8ff73700 15 OSD::op_tp <red>worker</red> wq OSD::OpWQ done processing 0x1 (0 active)
<br>2013-12-18 19:42:52.004577 7f2ca26c5700 12 FileStore::op_tp <red>worker</red> wq FileStore::OpWQ start processing 0x2aa1dd80 (1 active)
<br>2013-12-18 19:42:52.005139 7f2ca26c5700 15 FileStore::op_tp <red>worker</red> wq FileStore::OpWQ done processing 0x2aa1dd80 (0 active)
<br>2013-12-18 19:42:52.005334 7f2c9e790700 20 osd.15 267 <red></em>dispatch</red> 0x2ad1b480 osd_op(client.5722.0:7 rbd_header.10126b8b4567 [call rbd.get_size,call rbd.get_features,call rbd.get_snapcontext,call rbd.get_parent,call lock.get_info] 3.fa956e77 e267) v4
<br>2013-12-18 19:42:52.005373 7f2c9e790700 15 osd.15 267 <red><red>enqueue_op</red></red> 0x2aa9b9a0 prio 63 cost 111 latency 0.000124 osd_op(client.5722.0:7 rbd_header.10126b8b4567 [call rbd.get_size,call rbd.get_features,call rbd.get_snapcontext,call rbd.get_parent,call lock.get_info] 3.fa956e77 e267) v4
<br>2013-12-18 19:42:52.005444 7f2c97f83700 12 OSD::op_tp <red>worker</red> wq OSD::OpWQ start processing 0x1 (1 active)
<br>2013-12-18 19:42:52.005454 7f2c97f83700 10 osd.15 267 <red>dequeue_op</red> 0x2aa9b9a0 prio 63 cost 111 latency 0.000205 osd_op(client.5722.0:7 rbd_header.10126b8b4567 [call rbd.get_size,call rbd.get_features,call rbd.get_snapcontext,call rbd.get_parent,call lock.get_info] 3.fa956e77 e267) v4 pg pg[3.e77( v 267&#8217;733 (0&#8217;0,267&#8217;733] local-les=267 n=2 ec=15 les/c 267/267 266/266/266) [15] r=0 lpr=266 mlcod 267&#8217;733 active+clean]
<br>2013-12-18 19:42:52.006585 7f2c97f83700 10 osd.15 267 <red>dequeue_op</red> 0x2aa9b9a0 finish
<br>2013-12-18 19:42:52.006601 7f2c97f83700 15 OSD::op_tp <red>worker</red> wq OSD::OpWQ done processing 0x1 (0 active)
<br>2013-12-18 19:42:52.010185 7f2c9e790700 20 osd.15 267 <red><em>dispatch</red> 0x2ad1b240 osd_op(client.5722.0:9 rbd_header.10126b8b4567 [watch remove cookie 1 ver 0] 3.fa956e77 e267) v4
<br>2013-12-18 19:42:52.010207 7f2c9e790700 15 osd.15 267 <red><red>enqueue_op</red></red> 0x2aa9b8c0 prio 63 cost 0 latency 0.000168 osd_op(client.5722.0:9 rbd_header.10126b8b4567 [watch remove cookie 1 ver 0] 3.fa956e77 e267) v4
<br>2013-12-18 19:42:52.010259 7f2c96780700 12 OSD::op_tp <red>worker</red> wq OSD::OpWQ start processing 0x1 (1 active)
<br>2013-12-18 19:42:52.010269 7f2c96780700 10 osd.15 267 <red>dequeue_op</red> 0x2aa9b8c0 prio 63 cost 0 latency 0.000230 osd_op(client.5722.0:9 rbd_header.10126b8b4567 [watch remove cookie 1 ver 0] 3.fa956e77 e267) v4 pg pg[3.e77( v 267&#8217;733 (0&#8217;0,267&#8217;733] local-les=267 n=2 ec=15 les/c 267/267 266/266/266) [15] r=0 lpr=266 mlcod 267&#8217;733 active+clean]
<br>2013-12-18 19:42:52.010692 7f2c96780700 10 osd.15 267 <red>dequeue_op</red> 0x2aa9b8c0 finish
<br>2013-12-18 19:42:52.010696 7f2c96780700 15 OSD::op_tp <red>worker</red> wq OSD::OpWQ done processing 0x1 (0 active)
<br>2013-12-18 19:42:52.011222 7f2ca1ec4700 12 FileStore::op_tp <red>worker</red> wq FileStore::OpWQ start processing 0x2aa1dd80 (1 active)
<br>2013-12-18 19:42:52.011701 7f2ca1ec4700 15 FileStore::op_tp <red>worker</red> wq FileStore::OpWQ done processing 0x2aa1dd80 (0 active)
<br>2013-12-18 19:42:56.918744 7f2c9e790700 20 osd.15 267 <red></em>dispatch</red> 0x2ad94380 pg_stats_ack(1 pgs tid 18) v1
</textarea></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ceph Best known Performance Collection]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/13/ceph-best-known-performance-collection/"/>
    <updated>2013-12-13T15:35:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/13/ceph-best-known-performance-collection</id>
    <content type="html"><![CDATA[<p>In this posting, I hope to collect  <em>TILL NOW BEST KNOWN</em>  Ceph Performance and also their deployment/setup method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VM Creation by Virsh]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/12/vm-creation-by-virsh/"/>
    <updated>2013-12-12T14:34:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/12/vm-creation-by-virsh</id>
    <content type="html"><![CDATA[<h3>xml setting could be like below:</h3>

<figure class='code'><figcaption><span>libvirt.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;domain</span> <span class="na">type =</span><span class="s">&quot;kvm&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uuid&gt;</span>1b87fb8f-442c-4682-b693-b38612342cd1<span class="nt">&lt;/uuid&gt;</span>      // should be unique
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>node3_1 <span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;memory&gt;</span>524288 <span class="nt">&lt;/memory&gt;</span>
</span><span class='line'>  <span class="nt">&lt;vcpu&gt;</span>1 <span class="nt">&lt;/vcpu&gt;</span>
</span><span class='line'>  <span class="nt">&lt;cputune&gt;</span>                                               // virsh vcpupin
</span><span class='line'>    <span class="nt">&lt;vcpupin</span> <span class="na">vcpu=</span><span class="s">&#39;0&#39;</span> <span class="na">cpuset =</span><span class="s">&#39;4&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/cputune&gt;</span>
</span><span class='line'>  <span class="nt">&lt;os&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>hvm <span class="nt">&lt;/type&gt;</span>
</span><span class='line'>    <span class="nt">&lt;boot</span> <span class="na">dev=</span><span class="s">&quot;hd&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/os&gt;</span>
</span><span class='line'>  <span class="nt">&lt;features&gt;</span>
</span><span class='line'>    <span class="nt">&lt;acpi/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/features&gt;</span>
</span><span class='line'>  <span class="nt">&lt;clock</span> <span class="na">offset=</span><span class="s">&quot;utc&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;timer</span> <span class="na">name=</span><span class="s">&quot;pit&quot;</span> <span class="na">tickpolicy =</span><span class="s">&quot;delay&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;timer</span> <span class="na">name=</span><span class="s">&quot;rtc&quot;</span> <span class="na">tickpolicy =</span><span class="s">&quot;catchup&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/clock&gt;</span>
</span><span class='line'>  <span class="nt">&lt;cpu</span> <span class="na">mode=</span><span class="s">&quot;host-model&quot;</span> <span class="na">match=</span><span class="s">&quot;exact&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;devices&gt;</span>
</span><span class='line'>    <span class="nt">&lt;disk</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">device =</span><span class="s">&quot;disk&quot;</span><span class="nt">&gt;</span>                     // os disk
</span><span class='line'>      <span class="nt">&lt;driver</span> <span class="na">name =</span><span class="s">&quot;qemu&quot;</span> <span class="na">type=</span><span class="s">&quot;raw&quot;</span> <span class="na">cache=</span><span class="s">&quot;none&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source</span> <span class="na">file =</span><span class="s">&quot;/var/lib/instances/node3_1/instance.img&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;target</span> <span class="na">bus =</span><span class="s">&quot;virtio&quot;</span> <span class="na">dev=</span><span class="s">&quot;vda&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/disk&gt;</span>
</span><span class='line'>    <span class="nt">&lt;hostdev</span> <span class="na">mode=</span><span class="s">&#39;subsystem&#39;</span> <span class="na">type =</span><span class="s">&#39;pci&#39;</span> <span class="na">managed=</span><span class="s">&#39;yes&#39;</span><span class="nt">&gt;</span>  // nic setting
</span><span class='line'>      <span class="nt">&lt;source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;address</span> <span class="na">domain =</span><span class="s">&#39;0x0000&#39;</span> <span class="na">bus=</span><span class="s">&#39;0x04&#39;</span> <span class="na">slot=</span><span class="s">&#39;0x10&#39;</span> <span class="na">function =</span><span class="s">&#39;0x0&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/source&gt;</span>
</span><span class='line'>      <span class="nt">&lt;address</span> <span class="na">type =</span><span class="s">&#39;pci&#39;</span> <span class="na">domain=</span><span class="s">&#39;0x0000&#39;</span> <span class="na">bus=</span><span class="s">&#39;0x00&#39;</span> <span class="na">slot =</span><span class="s">&#39;0x05&#39;</span> <span class="na">function=</span><span class="s">&#39;0x0&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/hostdev&gt;</span>
</span><span class='line'>    <span class="nt">&lt;serial</span> <span class="na">type=</span><span class="s">&quot;pty&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;tablet&quot;</span> <span class="na">bus =</span><span class="s">&quot;usb&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;graphics</span> <span class="na">type=</span><span class="s">&quot;vnc&quot;</span> <span class="na">autoport =</span><span class="s">&quot;yes&quot;</span> <span class="na">keymap=</span><span class="s">&quot;en-us&quot;</span> <span class="na">listen=</span><span class="s">&quot;0.0.0.0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/devices&gt;</span>
</span><span class='line'><span class="nt">&lt;/domain&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>VM Creation by Virsh</h3>

<ol>
<li>make nic setting is right(SR-IOV, OpenVSwitch)</li>
<li>BIOS enables VT</li>
<li>virsh create libvirt.xml</li>
<li>virsh attach-device domain disk.xml

<blockquote><p>  Create your own rbd device(rbd info volume-name)
  According to below xml , attach your device</p></blockquote></li>
</ol>


<h3>disk xml could be like below:</h3>

<figure class='code'><figcaption><span>disk.xml   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;disk</span> <span class="na">type=</span><span class="s">&#39;network&#39;</span> <span class="na">device =</span><span class="s">&#39;disk&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;driver</span> <span class="na">name =</span><span class="s">&#39;qemu&#39;</span> <span class="na">type=</span><span class="s">&#39;raw&#39;</span> <span class="na">cache=</span><span class="s">&#39;none&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source</span> <span class="na">protocol =</span><span class="s">&#39;rbd&#39;</span> <span class="na">name=</span><span class="s">&#39;xiaoxi/volume-79ee1e33-0353-4e22-bf98-d81a91b2c283:debug_rbd=1:debug_client=1:debug_objecter=1:debug_striper=1:log_to_stderr=true&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;target</span> <span class="na">dev =</span><span class="s">&#39;vdb&#39;</span> <span class="na">bus=</span><span class="s">&#39;virtio&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;serial&gt;</span>79ee1e33-0353-4e22-bf98-d81a91b2c283<span class="nt">&lt;/serial&gt;</span>
</span><span class='line'>  <span class="nt">&lt;alias</span> <span class="na">name =</span><span class="s">&#39;virtio-disk1&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;address</span> <span class="na">type =</span><span class="s">&#39;pci&#39;</span> <span class="na">domain=</span><span class="s">&#39;0x0000&#39;</span> <span class="na">bus=</span><span class="s">&#39;0x00&#39;</span> <span class="na">slot =</span><span class="s">&#39;0x06&#39;</span> <span class="na">function=</span><span class="s">&#39;0x0&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/disk&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using bridge as network interface:</h3>

<figure class='code'><figcaption><span>/etc/network/interfaces</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#The primary network interface</span>
</span><span class='line'>auto br0
</span><span class='line'>iface br0 inet dhcp
</span><span class='line'>        bridge_ports eth0
</span><span class='line'>        bridge_stp off
</span><span class='line'>        bridge_fd 0
</span><span class='line'>        bridge_maxwait 0
</span></code></pre></td></tr></table></div></figure>


<p><code>/etc/init.d/networking restart</code></p>

<figure class='code'><figcaption><span>libvirt.xml using bridge</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;domain</span> <span class="na">type =</span><span class="s">&quot;kvm&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uuid&gt;</span>1b87fb8f-442c-4682-b693-b3866dc20cd3 <span class="nt">&lt;/uuid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>node2_1 <span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;memory&gt;</span>524288 <span class="nt">&lt;/memory&gt;</span>
</span><span class='line'>  <span class="nt">&lt;vcpu&gt;</span>1 <span class="nt">&lt;/vcpu&gt;</span>
</span><span class='line'>  <span class="nt">&lt;cputune&gt;</span>
</span><span class='line'>    <span class="nt">&lt;vcpupin</span> <span class="na">vcpu=</span><span class="s">&#39;0&#39;</span> <span class="na">cpuset =</span><span class="s">&#39;2&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/cputune&gt;</span>
</span><span class='line'>  <span class="nt">&lt;os&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>hvm <span class="nt">&lt;/type&gt;</span>
</span><span class='line'>    <span class="nt">&lt;boot</span> <span class="na">dev=</span><span class="s">&quot;hd&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/os&gt;</span>
</span><span class='line'>  <span class="nt">&lt;features&gt;</span>
</span><span class='line'>    <span class="nt">&lt;acpi/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/features&gt;</span>
</span><span class='line'>  <span class="nt">&lt;clock</span> <span class="na">offset=</span><span class="s">&quot;utc&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;timer</span> <span class="na">name=</span><span class="s">&quot;pit&quot;</span> <span class="na">tickpolicy =</span><span class="s">&quot;delay&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;timer</span> <span class="na">name=</span><span class="s">&quot;rtc&quot;</span> <span class="na">tickpolicy =</span><span class="s">&quot;catchup&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/clock&gt;</span>
</span><span class='line'>  <span class="nt">&lt;cpu</span> <span class="na">mode=</span><span class="s">&quot;host-model&quot;</span> <span class="na">match=</span><span class="s">&quot;exact&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;devices&gt;</span>
</span><span class='line'>    <span class="nt">&lt;disk</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">device =</span><span class="s">&quot;disk&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;driver</span> <span class="na">name =</span><span class="s">&quot;qemu&quot;</span> <span class="na">type=</span><span class="s">&quot;raw&quot;</span> <span class="na">cache=</span><span class="s">&quot;none&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source</span> <span class="na">file =</span><span class="s">&quot;/opt/instances/node2_1/instance.img&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;target</span> <span class="na">bus =</span><span class="s">&quot;virtio&quot;</span> <span class="na">dev=</span><span class="s">&quot;vda&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/disk&gt;</span>
</span><span class='line'>     <span class="nt">&lt;interface</span> <span class="na">type=</span><span class="s">&#39;bridge&#39;</span> <span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;source</span> <span class="na">bridge =</span><span class="s">&#39;br0&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;mac</span> <span class="na">address =</span><span class="s">&#39;00:11:22:33:44:55&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/interface&gt;</span>
</span><span class='line'>    <span class="nt">&lt;serial</span> <span class="na">type=</span><span class="s">&quot;pty&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;tablet&quot;</span> <span class="na">bus =</span><span class="s">&quot;usb&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;graphics</span> <span class="na">type=</span><span class="s">&quot;vnc&quot;</span> <span class="na">autoport =</span><span class="s">&quot;yes&quot;</span> <span class="na">keymap=</span><span class="s">&quot;en-us&quot;</span> <span class="na">listen=</span><span class="s">&quot;0.0.0.0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/devices&gt;</span>
</span><span class='line'><span class="nt">&lt;/domain&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>extra setting to apparmor:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">root@CephXCD1:~#</span> tail -3 /etc/apparmor.d/abstractions/libvirt-qemu
</span><span class='line'><span class="go">  # for rbd</span>
</span><span class='line'><span class="go">  /etc/ceph/ceph.conf r,</span>
</span><span class='line'><span class="go">  /usr/local/lib/* rmix,</span>
</span><span class='line'><span class="gp">root@CephXCD1:~#</span> service apparmor restart
</span><span class='line'><span class="go">Setting vncserver &amp; vncviewer: </span>
</span></code></pre></td></tr></table></div></figure>


<h3>install vncserver in your hyperviser</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">root@CephXCD1:~#</span> apt-get install vnc4server
</span><span class='line'><span class="gp">root@CephXCD1:~#</span> adduser vnc
</span><span class='line'><span class="gp">root@CephXCD1:~#</span> /etc/init.d/vncserver
</span><span class='line'><span class="gp">#</span>!/bin/bash
</span><span class='line'><span class="go">PATH=&quot;$PATH:/usr/bin/&quot;</span>
</span><span class='line'><span class="go">export USER= &quot;vnc&quot;</span>
</span><span class='line'><span class="go">DISPLAY=&quot;1&quot;</span>
</span><span class='line'><span class="go">DEPTH=&quot;16&quot;</span>
</span><span class='line'><span class="go">GEOMETRY=&quot;1024x768&quot;</span>
</span><span class='line'><span class="go">OPTIONS=&quot;-depth ${DEPTH} -geometry ${GEOMETRY} :${DISPLAY}&quot;</span>
</span><span class='line'><span class="go">. / lib/lsb /init-functions</span>
</span><span class='line'><span class="go">case &quot;$1&quot; in</span>
</span><span class='line'><span class="go">start)</span>
</span><span class='line'><span class="go">log_action_begin_msg &quot;Starting vncserver for user &#39;${USER}&#39; on localhost:${DISPLAY}&quot;</span>
</span><span class='line'><span class="go">su ${USER} -c &quot;/usr/bin/vncserver ${OPTIONS}&quot;</span>
</span><span class='line'><span class="go">;;</span>
</span><span class='line'><span class="go">stop)</span>
</span><span class='line'><span class="go">log_action_begin_msg &quot;Stoping vncserver for user &#39;${USER}&#39; on localhost:${DISPLAY}&quot;</span>
</span><span class='line'><span class="go">su ${USER} -c &quot;/usr/bin/vncserver -kill :${DISPLAY}&quot;</span>
</span><span class='line'><span class="go">;;</span>
</span><span class='line'><span class="go">restart)</span>
</span><span class='line'><span class="gp">$</span>0 stop
</span><span class='line'><span class="gp">$</span>0 start
</span><span class='line'><span class="go">;;</span>
</span><span class='line'><span class="go">esac</span>
</span><span class='line'><span class="go">exit 0</span>
</span><span class='line'><span class="gp">root@CephXCD1:~#</span> chmod +x vncserver
</span><span class='line'><span class="gp">root@CephXCD1:~#</span> service vncserver start
</span></code></pre></td></tr></table></div></figure>


<h3>configure the client</h3>

<p>install vnc viewer in a computer with 图形界面, like windows</p>

<p><img src="http://xuechendi.github.io/images/vm_creation_by_virsh/vncviewer.png" alt="vncviewer" />
<img src="http://xuechendi.github.io/images/vm_creation_by_virsh/vncviewer2.png" alt="vncviewer" /></p>

<p>with best luck, you will enter the VM</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Ceph]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/12/building-ceph/"/>
    <updated>2013-12-12T11:17:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/12/building-ceph</id>
    <content type="html"><![CDATA[<p>Actually, I had bulid ceph from codes for many times, just each time, I have to struggle a little bit, for I always forget install some libraries.</p>

<p>So, record things here</p>

<p>I found ceph.com have also detailed its &ldquo;Building from Codes&rdquo; doc, indeed, much detailed than previous version</p>

<p>But seems I still missing some packages when doing &ldquo;make&rdquo;</p>

<p><code><a href="http://ceph.com/docs/master/install/build-ceph/">http://ceph.com/docs/master/install/build-ceph/</a></code></p>

<figure class='code'><figcaption><span>pre-make-ceph-packages</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">sudo apt-get install pkg-config autotools-dev autoconf automake cdbs gcc g++ git libboost-dev libedit-dev libssl-dev libtool libfcgi libfcgi-dev libfuse-dev linux-kernel-headers libcrypto++-dev libcrypto++ libexpat1-dev libboost-thread-dev uuid-dev libkeyutils-dev libgoogle-perftools-dev libatomic-ops-dev libaio-dev libgdata-common libgdata13 libsnappy-dev libleveldb-dev libboost-program-options-dev</span>
</span><span class='line'><span class="go">cd ceph</span>
</span><span class='line'><span class="go">./autogen.sh</span>
</span><span class='line'><span class="go">./configure</span>
</span><span class='line'><span class="go">make</span>
</span><span class='line'><span class="go">make install</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><strong><strong><strong><strong><strong><strong><strong><em>Extra parts</em></strong></strong></strong></strong></strong></strong></strong></strong>****
I have ran into the libboost-thread and libboost-system problem for really a lot of times, so the best way to do here is that:</p>

<h2>Keep same and the only version of libboost dpkg installed in your system ( verified by dpkg -l | grep boost )</h2>

<h2>Any time after your purge/remove and install pkg, don&rsquo;t just try make, you need to do ./configure first</h2>

<h2>Oh, maybe problem also can be caused by you have multi gcc/g++ version</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Understanding of High Availability]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/09/high-avalability-report/"/>
    <updated>2013-12-09T10:20:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/09/high-avalability-report</id>
    <content type="html"><![CDATA[<blockquote><p>Get known of HA, that&rsquo;s what I was been requested week ago, and I just thought what I need to do is knowing how to use something called heartbeat and pacemaker, maybe knowing the protocol and model underneath these two projects. Then you definitely get what happened, so many nouns pop out, &ldquo;corosync&rdquo;, &ldquo;CMAN&rdquo;, &ldquo;OpenAIS&rdquo;, &ldquo;rgmanager&rdquo;, and protocols like &ldquo;SRP&rdquo;, &ldquo;RRP&rdquo;, &ldquo;quiescent algorithms&rdquo;, &ldquo;termination detection algorithms&rdquo;, etc.</p>

<p>I <em>TRIED REALLY HARD</em> here to figure out the relationship among all these nouns, and what gives me a relief is that I just found this posting in <a href="http://schlutech.com/2011/07/demystifying-high-availability-linux-clustering-technologies/" target="_blank" ><code>which</code> some guy gets my feeling </a>. ^_^ , Just dig dig dig&hellip;</p>

<p>I put everything in the way I thought will be much clear <code>below in the SLIDES</code>, and will update in following days</p></blockquote>

<p>For Chinese version, please download the slides <code><a href="http://xuechendi.github.io/downloads/HA-CN-report-XCD.pdf">here</a></code></p>

<p><embed src='http://xuechendi.github.io/slides/get-known-of-ha' allowFullScreen='true' width='100%' height='800' align='middle'></embed></p>

<h2>Referrence</h2>


<h6><a href="http://upcommons.upc.edu/pfc/bitstream/2099.1/4970/1/memoria.pdf" target="_blank">1. MASTER THESIS of Abraham Iglesias Aparicio</a></h6>


<h6><a href="http://www.linux-ha.org/wiki/Documentation" target="_blank">2. The Linux-HA project: Heartbeat</a></h6>


<h6><a href="http://hi.baidu.com/leolance/item/26e1943543e873342e0f8142" target="_blank">3. http://hi.baidu.com/leolance/item/26e1943543e873342e0f8142</a></h6>


<h6><a href="http://www.ultramonkey.org/3/linux-ha.html" target="_blank">4. http://www.ultramonkey.org/3/linux-ha.html</a></h6>


<h6><a href="http://doc.opensuse.org/products/draft/SLE-HA/SLE-ha-guide_sd_draft/book.sleha.html" target="_blank">5. SUSE Linux Enterprise High Availability Extension High Availability Guide</a></h6>


<h6><a href="http://linux-ha.org/_cache/TechnicalPapers__UKUUG-WinterConf-2004-SCRAT-Paper.pdf" target="_blank">6. 《A new Cluster Resource Manager for heartbeat》Writen by SUSE</a></h6>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Understanding of High Availability]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/09/heartbeat-and-drbd-internal/"/>
    <updated>2013-12-09T10:20:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/09/heartbeat-and-drbd-internal</id>
    <content type="html"><![CDATA[<blockquote><p>Get known of HA, that&rsquo;s what I was been requested week ago, and I just thought what I need to do is knowing how to use something called heartbeat and pacemaker, maybe knowing the protocol and model underneath these two projects. Then you definitely get what happened, so many nouns pop out, &ldquo;corosync&rdquo;, &ldquo;CMAN&rdquo;, &ldquo;OpenAIS&rdquo;, &ldquo;rgmanager&rdquo;, and protocols like &ldquo;SRP&rdquo;, &ldquo;RRP&rdquo;, &ldquo;quiescent algorithms&rdquo;, &ldquo;termination detection algorithms&rdquo;, etc.</p>

<p>I <em>TRIED REALLY HARD</em> here to figure out the relationship among all these nouns, and what gives me a relief is that I just found this posting in <a href="http://schlutech.com/2011/07/demystifying-high-availability-linux-clustering-technologies/" target="_blank" ><code>which</code> some guy gets my feeling </a>. ^_^ , Just dig dig dig&hellip;</p>

<p>I put everything in the way I thought will be much clear <code>below in the SLIDES</code>, and will update in following days</p></blockquote>

<p><embed src='http://xuechendi.github.io/slides/get-known-of-ha' allowFullScreen='true' width='100%' height='800' align='middle'></embed></p>

<h2>Referrence</h2>


<h6><a href="http://upcommons.upc.edu/pfc/bitstream/2099.1/4970/1/memoria.pdf" target="_blank">1. MASTER THESIS of Abraham Iglesias Aparicio</a></h6>


<h6><a href="http://www.linux-ha.org/wiki/Documentation" target="_blank">2. The Linux-HA project: Heartbeat</a></h6>


<h6><a href="http://hi.baidu.com/leolance/item/26e1943543e873342e0f8142" target="_blank">3. http://hi.baidu.com/leolance/item/26e1943543e873342e0f8142</a></h6>


<h6><a href="http://www.ultramonkey.org/3/linux-ha.html" target="_blank">4. http://www.ultramonkey.org/3/linux-ha.html</a></h6>


<h6><a href="http://doc.opensuse.org/products/draft/SLE-HA/SLE-ha-guide_sd_draft/book.sleha.html" target="_blank">5. SUSE Linux Enterprise High Availability Extension High Availability Guide</a></h6>


<h6><a href="http://linux-ha.org/_cache/TechnicalPapers__UKUUG-WinterConf-2004-SCRAT-Paper.pdf" target="_blank">6. 《A new Cluster Resource Manager for heartbeat》Writen by SUSE</a></h6>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fusion-io]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/07/fusion-io/"/>
    <updated>2013-12-07T15:27:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/07/fusion-io</id>
    <content type="html"><![CDATA[<p><embed src='http://xuechendi.github.io/slides/fusion-io' allowFullScreen='true' width='100%' height='640' align='middle'></embed>
Powered by <a href="http://lab.hakim.se/reveal-js/#/1" target="_blank">Reveal.js</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graduate design draft]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/06/Graduate-design-draft/"/>
    <updated>2013-12-06T11:55:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/06/Graduate-design-draft</id>
    <content type="html"><![CDATA[<h2>The paper contents:</h2>

<pre><code>1.overview
2.Cache and Consistency(ceph, vertical and horizonal)
3.The atomic transaction(leveldb internal)
4.The design and architecture
5.The implementation
6.The evaluation
7.The wanna do(cache for vm snapshot?)
</code></pre>

<h3>Coherence: Read the right data.</h3>

<h3>Consistency: Write at the right sequence and location, to garantee the right reading data.</h3>

<h2>How to achieve cache consistency?</h2>

<blockquote><p>所有的一致性方案都要求通过某种方式来实现同一CACHE块的<b>串行化</b>访问，不论是通过串行化对通信媒介的访问，还是通过串行化对其他共享结构的访问。</p></blockquote>


<p>Consistency only can be acheived by maintain the sequentialty of accessing devices.</p>

<h2>Vertical data consistency and Horizonal data consistency</h2>

<h3>Vertical data consistency: Require data consistency among memory, persistency cache device(ssd), and also storage backend(ceph cluster).</h3>

<pre><code>1. How ceph cache pool plan to design and architect.
2. System register, memory design.
3. Other Tiering storage.
</code></pre>

<h3>Horizonal data consistency: When the same backend attach to different VM and even different VM on diffent host, how to keep all cache being data consistent and coherent.</h3>

<pre><code>1. Splay? Ceph Metadata subtree updating mechanism?.
2. Multi core system with shared memory design.
3. ???
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to do Ceph Latency Breakdown]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/05/how-to-do-ceph-latency-breakdown/"/>
    <updated>2013-12-05T10:38:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/05/how-to-do-ceph-latency-breakdown</id>
    <content type="html"><![CDATA[<h2>The Ceph Latency Breakdown process includes 3 steps:</h2>

<h3>1. Enable Log Configuration or Other performance count mechanism to record the runtime infomation.</h3>

<h3>2. Produce the workload and meanwhile dump the perfcounter</h3>

<h3>3. Parse the perfcounter dump data</h3>

<h2>Details:</h2>

<p>In ceph, a perfcounter mechanism has been adopted to do the latency breakdown, and the runtime info can be dumped by the admin_socket is an internal implementation in Ceph.</p>

<p>example:</p>

<p><1> codes</p>

<figure class='code'><figcaption><span>git diff</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">osd</span><span class="o">/</span><span class="n">OSD</span><span class="p">.</span><span class="n">cc</span> <span class="n">b</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">osd</span><span class="o">/</span><span class="n">OSD</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'><span class="n">index</span> <span class="n">d34bb9c</span><span class="p">.</span><span class="mf">.6</span><span class="n">c308d3</span> <span class="mi">100644</span>
</span><span class='line'><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">osd</span><span class="o">/</span><span class="n">OSD</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">osd</span><span class="o">/</span><span class="n">OSD</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">7055</span><span class="p">,</span><span class="mi">10</span> <span class="o">+</span><span class="mi">7055</span><span class="p">,</span><span class="mi">10</span> <span class="err">@@</span> <span class="n">PGRef</span> <span class="n">OSD</span><span class="o">::</span><span class="n">OpWQ</span><span class="o">::</span><span class="n">_dequeue</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">void</span> <span class="n">OSD</span><span class="o">::</span><span class="n">OpWQ</span><span class="o">::</span><span class="n">_process</span><span class="p">(</span><span class="n">PGRef</span> <span class="n">pg</span><span class="p">,</span> <span class="n">ThreadPool</span><span class="o">::</span><span class="n">TPHandle</span> <span class="o">&amp;</span><span class="n">handle</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'><span class="o">-</span>  <span class="n">utime_t</span> <span class="n">pg_lock_lat</span> <span class="o">=</span> <span class="n">ceph_clock_now</span><span class="p">(</span><span class="n">g_ceph_context</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">utime_t</span> <span class="n">start</span> <span class="o">=</span> <span class="n">ceph_clock_now</span><span class="p">(</span><span class="n">g_ceph_context</span><span class="p">);</span>
</span><span class='line'>   <span class="n">pg</span><span class="o">-&gt;</span><span class="n">lock_suspend_timeout</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>
</span><span class='line'><span class="o">-</span>  <span class="n">pg_lock_lat</span> <span class="o">=</span> <span class="n">ceph_clock_now</span><span class="p">(</span><span class="n">g_ceph_context</span><span class="p">)</span> <span class="o">-</span> <span class="n">pg_lock_lat</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span>  <span class="n">osd</span><span class="o">-&gt;</span><span class="n">logger</span><span class="o">-&gt;</span><span class="n">tinc</span><span class="p">(</span><span class="n">l_osd_pg_lock_lat</span><span class="p">,</span> <span class="n">pg_lock_lat</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">utime_t</span> <span class="n">end</span> <span class="o">=</span> <span class="n">ceph_clock_now</span><span class="p">(</span><span class="n">g_ceph_context</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>  <span class="n">osd</span><span class="o">-&gt;</span><span class="n">logger</span><span class="o">-&gt;</span><span class="n">tinc</span><span class="p">(</span><span class="n">l_osd_pg_lock_lat</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">OpRequestRef</span> <span class="n">op</span><span class="p">;</span>
</span><span class='line'>   <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>Current Ceph Version only enabled admin_socket in Ceph Cluster Side, so we need to enable it in RBD side.</p>

<p><2> dump the data</p>

<figure class='code'><figcaption><span>ceph.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#Enable the admin_socket in QEMU RBD</span>
</span><span class='line'>check ceph.conf
</span><span class='line'><span class="nv">perf</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>-&gt;
</span><span class='line'><span class="c">#perf = false</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>QEMU disk.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;disk</span> <span class="na">type=</span><span class="s">&#39;network&#39;</span> <span class="na">device=</span><span class="s">&#39;disk&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;driver</span> <span class="na">name=</span><span class="s">&#39;qemu&#39;</span> <span class="na">type=</span><span class="s">&#39;raw&#39;</span> <span class="na">cache=</span><span class="s">&#39;none&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source</span> <span class="na">protocol=</span><span class="s">&#39;rbd&#39;</span> <span class="na">name=</span><span class="s">&#39;xcd_8osd/volume-3:admin_socket=/var/run/ceph/node5_1.asok&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;target</span> <span class="na">dev=</span><span class="s">&#39;vdb&#39;</span> <span class="na">bus=</span><span class="s">&#39;virtio&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;serial&gt;</span>12f70341-d199-4fca-9270-56e5d6b80061<span class="nt">&lt;/serial&gt;</span>
</span><span class='line'>  <span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">&#39;virtio-disk1&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;address</span> <span class="na">type=</span><span class="s">&#39;pci&#39;</span> <span class="na">domain=</span><span class="s">&#39;0x0000&#39;</span> <span class="na">bus=</span><span class="s">&#39;0x00&#39;</span> <span class="na">slot=</span><span class="s">&#39;0x06&#39;</span> <span class="na">function=</span><span class="s">&#39;0x0&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/disk&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">virsh attach instance1 disk.xml</span>
</span><span class='line'>
</span><span class='line'><span class="go">ceph --admin-daemon /var/run/ceph/${osd} perf dump &gt;&gt; ${osd}.txt</span>
</span></code></pre></td></tr></table></div></figure>


<hr>


<h2>Below is the summary of all scripts:</h2>

<p><a href ="http://xuechendi.github.io/downloads/Ceph_Latency_Breakdown_Script.zip"><code style="font-family: 'Fjalla One','Georgia','Helvetica Neue',Arial,sans-serif;font-weight:900;font-size:12px;">download the script</code></a></p>

<h3>Script to mkceph:(in the dir &ldquo;mkceph&rdquo;)</h3>

<p>mkceph_with_pg.sh</p>

<h3>Script to produce workload:(all put in the dir &ldquo;run the test&rdquo;)</h3>

<p><b>run.sh</b>: aim to change the <code>ceph.conf</code> op thread number setting, then restart ceph, vm, and call <code>test.sh</code> to start the test. The test result will then be stored in the path &ldquo;/data/xcd/ceph-CephXCD/run_${id}&rdquo;</p>

<p><b>test.sh</b>: aim to clean run a vm_num loadline test, call <code>mhost-volume-test-xcd.sh</code> to run the actual test</p>

<p><b>mhost-volume-test-xcd.sh</b>: calls <code>clean_cache_on_ceph.sh</code>,<code>check_readahead.sh</code>, <code>volume-test_in_vm.sh</code>, <code>all.fio</code>, <code>volume-test_in_pc.sh</code>, <code>ceph_perf_counter_dump.sh</code>, <code>volume-test_in_ceph.sh</code>, <code>check_cephHealth.sh</code> to run the test(producing workload and collecting runtime system info &amp; ceph info), then collects all the data back to the Node1.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">#</span>example:
</span><span class='line'><span class="go">./mhost-volume-test-xcd.sh 1 $vm_num 3 4k &quot;vmNum_&quot;$vm_num ${qd} node13_net</span>
</span></code></pre></td></tr></table></div></figure>


<p>tip: There is a VM list stored in file &ldquo;node13_net&rdquo;</p>

<h3>Script to parse the data:</h3>

<p><b>getLatbreakdown.sh</b>: aim to parse latency data from <code>*.asok</code> files using <code>post_perf.py</code></p>

<p><b>getResult.sh</b>: aim to parse iostat, mpstat data. It calls <code>post_volume_xcd.sh</code>, <code>post_osd.sh</code>, <code>post_cpu.sh</code>, <code>iostat.sh</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRBD and Heartbeat]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/04/drbd-and-heartbeat/"/>
    <updated>2013-12-04T19:07:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/04/drbd-and-heartbeat</id>
    <content type="html"><![CDATA[<p>These days, need to deploy a HA solution in our setup, and just write all these down helping the next time deployment.</p>

<h2>The Overview</h2>

<p><img src="http://xuechendi.github.io/images/HA/IMG_0045.PNG" alt="overview" width=80%></p>

<p>Here we have 2 setups, providing both web service for management and iscsi target service.</p>

<p>What we wanna have is all the LVs in setup1(222.31.76.144) has a mirror in setup2(222.31.76.228) &mdash; so we need DRBD</p>

<p>Then we use LV1 as lun0 to provide iscsi disk to client1, all client1 knows is that his iscsi target provider&rsquo;s ip address is 222.31.76.250(may be setup1 or setup2) &mdash; so we need heartbeat.</p>

<p>Basically, setup1 will response to the client&rsquo;s request, only when setup&rsquo;s eth0 nic doesn&rsquo;t work(this will happen when setup1 is down), setup2 will continue to provide web service and iscsi service.</p>

<p>Ok, another problem, when we need setup2 can continue to provide iscsi service, we need disks in setup to can also be the primary node in drbd semantic, so when data written to setup2, data can be sync to setup1.</p>

<p>Let&rsquo;s just summary all the requirement here:</p>

<ol>
<li><p>Using heartbeat to provide a virtual ip 222.31.76.250 and watch the liveness of both setups.</p></li>
<li><p>Using DRBD to sync LVs in setup1 and setup2, the syncronization can be both sides(dual primary).</p></li>
<li><p>Need to keep in mind, when the sync link(eth0,192.168.1.*) breaks, there will be a split brain situation in our DRBD setting, so we need to record who is the latest iscsi target provider and use that one to recover the DRBD setting.</p></li>
</ol>


<h2>DRBD setting</h2>

<p>1.The installation
we need to install two parts of DRBD, the kmod who is the real implementation of drbd, and the drbdadm, which helps a lot to manage the drbd service.</p>

<figure class='code'><figcaption><span>drbd rpm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>drbd83-8.3.15-2.el5.centos.x86_64.rpm       kmod-drbd83-8.3.15-3.el5.centos.x86_64.rpm
</span></code></pre></td></tr></table></div></figure>


<p>2.The drbd config file
We can start from the drbd conf file /etc/drbd.conf</p>

<figure class='code'><figcaption><span>/etc/drbd.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># please have a a look at the example configuration file in</span>
</span><span class='line'><span class="c"># /usr/share/doc/drbd83/drbd.conf</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>include <span class="s2">&quot;drbd.d/global_common.conf&quot;</span>;
</span><span class='line'>include <span class="s2">&quot;drbd.d/*.res&quot;</span>;
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As we can see, in this config file,it include a global_common.conf and *.res
The first one writes some common setting for drbd, things like the sync protocol(Async, semi-sync, sync), net rate setting, blah, blah&hellip;
The second one is what we need to build our resource, the config will be like below:</p>

<figure class='code'><figcaption><span>mpx.res</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>resource mpx <span class="o">{</span>
</span><span class='line'>    protocol C;
</span><span class='line'>    net <span class="o">{</span>
</span><span class='line'>        allow-two-primaries;
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    syncer <span class="o">{</span>
</span><span class='line'>          rate 1024M;  //sync bandwidth
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>    on super <span class="o">{</span>
</span><span class='line'>        device /dev/drbd0;
</span><span class='line'>        disk /dev/raid0/lv01;
</span><span class='line'>        address 192.168.1.100:7789;
</span><span class='line'>        meta-disk internal;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    on MPXHA <span class="o">{</span>
</span><span class='line'>        device /dev/drbd0;
</span><span class='line'>        disk /dev/vg01/lv01;
</span><span class='line'>        address 192.168.1.152:7789;
</span><span class='line'>        meta-disk internal;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The protocol part says we will use sync method in this resource
The net part says both nodes can be primary
The last two parts describe the drbd device and the nic they used to sync data(Here we can direclty connect two setup by ethernet line.)</p>

<p>The above *.res should has replication both in setup1 and setup2
After that there is few command we need to first time build this DRBD resource.</p>

<figure class='code'><figcaption><span>first building drbd resource</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>drbdadm create-md mpx // this should be <span class="k">done </span>both in setup1 and setup2
</span><span class='line'>service drbd restart // both in setup1 and setup2
</span><span class='line'>
</span><span class='line'>drbdadm primary --force resource // only in setup1
</span><span class='line'>
</span><span class='line'>drbd-overview // can be <span class="k">done </span>both in setup1 or setup2, here I did in setup2
</span><span class='line'>drbd driver loaded OK; device status:
</span><span class='line'>version: 8.3.11 <span class="o">(</span>api:88/proto:86-96<span class="o">)</span>
</span><span class='line'>srcversion: 2D876214BAAD53B31ADC1D6
</span><span class='line'>m:res  cs          ro                 ds
</span><span class='line'>0:mpx  SyncTarget  Secondary/Primary  Inconsistent/UpToDate  C
</span><span class='line'>...    sync<span class="err">&#39;</span>ed:    25.4%              <span class="o">(</span>1373576/1837720<span class="o">)</span>K
</span><span class='line'>
</span><span class='line'>... <span class="nb">wait </span><span class="k">until</span>
</span><span class='line'>
</span><span class='line'>drbd driver loaded OK; device status:
</span><span class='line'>version: 8.3.11 <span class="o">(</span>api:88/proto:86-96<span class="o">)</span>
</span><span class='line'>srcversion: 2D876214BAAD53B31ADC1D6
</span><span class='line'>m:res  cs         ro                 ds                 p  mounted  fstype
</span><span class='line'>0:mpx  Connected  Secondary/Primary  UpToDate/UpToDate  C
</span><span class='line'>
</span><span class='line'>drbdadm primary mpx // in setup2
</span><span class='line'>drbd-overview
</span><span class='line'>drbd driver loaded OK; device status:
</span><span class='line'>version: 8.3.11 <span class="o">(</span>api:88/proto:86-96<span class="o">)</span>
</span><span class='line'>srcversion: 2D876214BAAD53B31ADC1D6
</span><span class='line'>m:res  cs         ro               ds
</span><span class='line'>0:mpx  Connected  Primary/Primary  UpToDate/UpToDate  C
</span></code></pre></td></tr></table></div></figure>


<p>Here is when we use drbd sevice as iscsi lun,yeah, you need this copy both in setup1 and setup2</p>

<figure class='code'><figcaption><span>scst.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Automatically generated by SCST Configurator v2.2.0.</span>
</span><span class='line'>HANDLER vdisk_fileio <span class="o">{</span>
</span><span class='line'>    DEVICE vg01_lv01 <span class="o">{</span>
</span><span class='line'>        filename /dev/drbd0 // ￼ drbd
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>TARGET_DRIVER iscsi <span class="o">{</span>
</span><span class='line'>    enabled 1
</span><span class='line'>    TARGET iqn.2011-1212.edu.cuc.storagelab:mpx.target1 <span class="o">{</span>
</span><span class='line'>        cpu_mask 0000ff
</span><span class='line'>        enabled 1
</span><span class='line'>        rel_tgt_id 1
</span><span class='line'>        GROUP xcd <span class="o">{</span>
</span><span class='line'>            LUN 0 vg01_lv01
</span><span class='line'>            INITIATOR iqn.2012-12.cn.edu.cuc.xcd:1234567
</span><span class='line'>            INITIATOR iqn.1991-05.com.microsoft:win-p56rroe0srf
</span><span class='line'>            cpu_mask 0000ff
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Heartbeat setting</h2>

<ol>
<li>The installation
Seems we can not simply get heartbeat in yum
Here is the solution</li>
</ol>


<figure class='code'><figcaption><span>heartbeat installation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">Step-1 : Make download folder under the root.</span>
</span><span class='line'><span class="go">[root@setup1 download]# mkdir /download</span>
</span><span class='line'><span class="go">[root@setup1 download]# cd /download/</span>
</span><span class='line'><span class="go">Step-2 : Download EPEL repository.</span>
</span><span class='line'><span class="go">[root@setup1 download]# wget ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/6rolling/i386/os/Packages/epel-release-6-5.noarch.rpm</span>
</span><span class='line'><span class="go">Step-3 : Install Epel RPM.</span>
</span><span class='line'><span class="go">rpm -ivUh epel-release-6-5.noarch.rpm </span>
</span><span class='line'><span class="go">warning: epel-release-6-5.noarch.rpm: Header V4 DSA/SHA1 Signature, key ID 192a7d7d: NOKEY</span>
</span><span class='line'><span class="go">Preparing...                ########################################### [100%]</span>
</span><span class='line'><span class="go">   1:epel-release           ########################################### [100%]</span>
</span><span class='line'><span class="go">Step-4 : Edit epel.repo file ‘/etc/yum.repos.d/epel.repo’ change the line # 6 ‘enable=1 to enable=0′.</span>
</span><span class='line'><span class="go">[root@setup1 download]# vi /etc/yum.repos.d/epel.repo </span>
</span><span class='line'><span class="go">[epel]</span>
</span><span class='line'><span class="go">name=Extra Packages for Enterprise Linux 6 - $basearch</span>
</span><span class='line'><span class="gp">#</span><span class="nv">baseurl</span><span class="o">=</span>http://download.fedoraproject.org/pub/epel/6/<span class="nv">$basearch</span>
</span><span class='line'><span class="gp">mirrorlist=http://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;amp;arch=$</span>basearch
</span><span class='line'><span class="go">failovermethod=priority</span>
</span><span class='line'><span class="go">enabled=0</span>
</span><span class='line'><span class="go">CentOS 6 :  </span>
</span><span class='line'><span class="go">Step-5 : Now we are ready to install Heartbeat with yum command.</span>
</span><span class='line'><span class="go">[root@setup1 download]# yum --enablerepo=epel install heartbeat</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>The setting</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@setup1&amp;setup2 download]# cp /usr/share/doc/heartbeat-3.0.4/ha.cf /etc/ha.d/</span>
</span><span class='line'><span class="go">[root@setup1&amp;setup2 download]# cp /usr/share/doc/heartbeat-3.0.4/haresources /etc/ha.d/</span>
</span><span class='line'><span class="go">[root@setup1&amp;setup2 download]# cp /usr/share/doc/heartbeat-3.0.4/authkeys /etc/ha.d/</span>
</span><span class='line'><span class="go">[root@setup1 download]# vim /etc/ha.d/ha.cf</span>
</span><span class='line'><span class="go">debugfile /var/log/ha-debug</span>
</span><span class='line'><span class="go">keepalive 2</span>
</span><span class='line'><span class="go">deadtime 10</span>
</span><span class='line'><span class="go">warntime 6</span>
</span><span class='line'><span class="go">initdead 120</span>
</span><span class='line'><span class="go">udpport 694</span>
</span><span class='line'><span class="go">ucast eth0 222.31.76.228</span>
</span><span class='line'><span class="go">node   super</span>
</span><span class='line'><span class="go">node   MPXHA</span>
</span><span class='line'><span class="go">auto_failback on</span>
</span><span class='line'><span class="go">respawn hacluster /usr/lib64/heartbeat/ipfail</span>
</span><span class='line'><span class="go">[root@setup2 download]# vim /etc/ha.d/ha.cf</span>
</span><span class='line'><span class="go">debugfile /var/log/ha-debug</span>
</span><span class='line'><span class="go">keepalive 2</span>
</span><span class='line'><span class="go">deadtime 10</span>
</span><span class='line'><span class="go">warntime 6</span>
</span><span class='line'><span class="go">initdead 120</span>
</span><span class='line'><span class="go">udpport 694</span>
</span><span class='line'><span class="go">ucast eth0 222.31.76.144</span>
</span><span class='line'><span class="go">node   super</span>
</span><span class='line'><span class="go">node   MPXHA</span>
</span><span class='line'><span class="go">auto_failback on</span>
</span><span class='line'><span class="go">respawn hacluster /usr/lib64/heartbeat/ipfail</span>
</span><span class='line'><span class="go">[root@setup1&amp;setup2 download]# vim /etc/ha.d/haresouces</span>
</span><span class='line'><span class="go">super IPaddr::222.31.76.250/24/eth0</span>
</span><span class='line'><span class="go">[root@setup1&amp;setup2 download]# service heartbeat restart</span>
</span></code></pre></td></tr></table></div></figure>


<h2>There is also one problem we mentioned before called &ldquo;split brain&rdquo;, here is the way to solve this situation</h2>

<p>This situation happens when the eth0(the link used to sync data beween drbd resources are broken), and both drbd will see itself as primary and the other as unknown</p>

<figure class='code'><figcaption><span>when split brain happens</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[root@super ~]# service drbd status</span>
</span><span class='line'><span class="go">drbd driver loaded OK; device status:</span>
</span><span class='line'><span class="go">version: 8.3.11 (api:88/proto:86-96)</span>
</span><span class='line'><span class="go">srcversion: 2D876214BAAD53B31ADC1D6</span>
</span><span class='line'><span class="go">m:res  cs          ro               ds                 p       mounted  fstype</span>
</span><span class='line'><span class="go">0:mpx  StandAlone  Primary/Unknown  UpToDate/DUnknown  r-----</span>
</span></code></pre></td></tr></table></div></figure>


<p>The way to tackle this problem when both drbd device also act as the iscsi lun</p>

<figure class='code'><figcaption><span>How to solve split brain problem</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">service scst stop</span>
</span><span class='line'><span class="go">drbdadm secondary mpx</span>
</span><span class='line'><span class="go">drbdadm disconnect mpx</span>
</span><span class='line'><span class="go">drbdadm -- --discard-my-data connect mpx</span>
</span><span class='line'><span class="go">ssh 222.31.76.144 &quot;drbdadm connect mpx&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="go">service drbd status </span>
</span><span class='line'>
</span><span class='line'><span class="go">drbd driver loaded OK; device status:</span>
</span><span class='line'><span class="go">version: 8.3.11 (api:88/proto:86-96)</span>
</span><span class='line'><span class="go">srcversion: 2D876214BAAD53B31ADC1D6</span>
</span><span class='line'><span class="go">m:res  cs          ro                 ds</span>
</span><span class='line'><span class="go">0:mpx  SyncTarget  Secondary/Primary  Inconsistent/UpToDate  C</span>
</span><span class='line'><span class="go">...    sync&#39;ed:    25.4%              (1373576/1837720)K</span>
</span><span class='line'>
</span><span class='line'><span class="go">drbd driver loaded OK; device status:</span>
</span><span class='line'><span class="go">version: 8.3.11 (api:88/proto:86-96)</span>
</span><span class='line'><span class="go">srcversion: 2D876214BAAD53B31ADC1D6</span>
</span><span class='line'><span class="go">m:res  cs         ro                 ds                 p  mounted  fstype</span>
</span><span class='line'><span class="go">0:mpx  Connected  Secondary/Primary  UpToDate/UpToDate  C</span>
</span><span class='line'>
</span><span class='line'><span class="go">drbdadm primary mpx</span>
</span><span class='line'>
</span><span class='line'><span class="go">drbd driver loaded OK; device status:</span>
</span><span class='line'><span class="go">version: 8.3.11 (api:88/proto:86-96)</span>
</span><span class='line'><span class="go">srcversion: 2D876214BAAD53B31ADC1D6</span>
</span><span class='line'><span class="go">m:res  cs         ro               ds</span>
</span><span class='line'><span class="go">0:mpx  Connected  Primary/Primary  UpToDate/UpToDate  C</span>
</span><span class='line'>
</span><span class='line'><span class="go">service scst start</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just some paitings on Openstack]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/18/just-some-paitings-on-openstack/"/>
    <updated>2013-11-18T14:27:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/18/just-some-paitings-on-openstack</id>
    <content type="html"><![CDATA[<p>Since I got my iPad air, just fell in love with drawing stuffs.</p>

<p>Painted in Nov. 5th afternoon after the discussion of &ldquo;Software Define Storage&rdquo;.</p>

<p><img src="http://xuechendi.github.io/images/Paintings_about_openstack/SDS.PNG" alt="SDS" /></p>

<p>And a draft draw of some Souvenir</p>

<p><img src="http://xuechendi.github.io/images/Paintings_about_openstack/Openstack_souv.PNG" alt="openstack_souv" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System analysis and tools]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/system-analysis-and-tools/"/>
    <updated>2013-11-15T01:09:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/system-analysis-and-tools</id>
    <content type="html"><![CDATA[<h2>It&rsquo;s really clear of these 2 graphs to remind me all those tools can help to analyse the system</h2>

<h2>So happily sharing here ~~~</h2>

<p><img src="http://xuechendi.github.io/images/system_analysis_tools/overview.jpg" alt="overview" />
<img src="http://xuechendi.github.io/images/system_analysis_tools/tools.jpg" alt="overview" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AIO-STRESS vs. FIO]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/aio-stress-vs-fio/"/>
    <updated>2013-11-15T01:05:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/aio-stress-vs-fio</id>
    <content type="html"><![CDATA[<p>There is no big gap to me in producing workload by AIO-STREE and FIO.</p>

<p>Just because I haven&rsquo;t using much more advanced feature in FIO like replay trace, and I just using libaio as the driver.</p>

<p>But here, I just wanna show some interesting test to see some behavior by different setting of io_depth and io_batch. And <code>sadly</code> that is just some wrong setting I did before and produced some strange data then I just realized how these settings mean. T_T</p>

<h2>Just follow my lead to see how I found this wrong setting. ^_^</h2>

<p><img src="http://xuechendi.github.io/images/AIO_vs_FIO/1.png" alt="findings" /></p>

<p>After a loadline test of io_depth setting, I just found the figures followed some rules, so using qemu logs, I draw above graph. This is a graph recording the io request intervals sending from qemu to librbd, and catched in librbd logs.</p>

<p>As we can see, when we set the queue_depth as 8, the first io request has quite small interval(0.075ms), but the interval between the 8th and 9th io request is pretty long(1.6ms). And if we set the queue_depth as 16, or 32. The burst interval happened just between the 16th to 17th, and 32th to 33th respectively.</p>

<p>So there comes the deduction:
Queue will send out all requests, then wait the last request completes . After that it starts to send out new queue.</p>

<h2>How to prove it?</h2>

<h3>Methodology:</h3>

<ol>
<li>. Set queue depth = 64</li>
<li>. make the 42th request sleep 3s in completion thread</li>
</ol>


<h3>&mdash;> If RBD waits 3s then receives the 65th requests, we can confirm the deduction.</h3>

<h3>How to do this?</h3>

<p>There is a function in librbd named C_AioRead::finish in AioCompletion.cc, so what we need to do is just randomly block this function for 3s, and see what happens.</p>

<p><img src="http://xuechendi.github.io/images/AIO_vs_FIO/2.png" alt="proving" /></p>

<p>Aha! The results just show as what we expect.</p>

<h3>But there are still 3 possibilities can produce result like this.</h3>

<p>1.Wrong workload setting?
2.Ceph RBD design ?  if there is some lock in finish thread that blocks the submit thread
3.Virtio ?</p>

<p>The situation produced by FIO</p>

<p><img src="http://xuechendi.github.io/images/AIO_vs_FIO/3.png" alt="proving" /></p>

<p>From this graph, we can see the result is really different by using aio-stress, which can help us to exclude last two possibilities. That means we must do some wrong setting in aio-stress or aio-stress just have some wierd strategy design.</p>

<p>Also we can see the difference in logs.</p>

<p><img src="http://xuechendi.github.io/images/AIO_vs_FIO/4.png" alt="proving" /></p>

<p><code>Here I will add some aio-stress codes digging into soon, just not now~ Sorry</code></p>

<hr>


<p>The right setting for random io in aio-stress to act more meet our demand (Here I said random io is because this setting may result in no io merge in sequential io)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">./aio-stress -O -o 3 -i 1 -d 64 -r4k -s 4m /dev/vdb</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://xuechendi.github.io/images/AIO_vs_FIO/5.png" alt="proving" /></p>

<p><img src="http://xuechendi.github.io/images/AIO_vs_FIO/6.png" alt="proving" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to break into Ceph Codes]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/how-to-break-into-ceph-codes/"/>
    <updated>2013-11-15T01:00:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/how-to-break-into-ceph-codes</id>
    <content type="html"><![CDATA[<p>Working in Progress, will be finished by this weekend</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectCacher: RBD Cache Codes]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/objectcacher-rbd-cache-codes/"/>
    <updated>2013-11-15T00:58:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/objectcacher-rbd-cache-codes</id>
    <content type="html"><![CDATA[<p>There is some cache mechanism in Ceph RBD.
And it is now in memory cache which supports write through and write back.</p>

<p>In this post, I would post what I have learnt from ObjectCacher codes.</p>

<h2>How to deploy RBD Cache</h2>

<p>there is a really clear instruction in ceph.com, just linked here <code><a href="http://ceph.com/docs/master/rbd/rbd-config-ref/?highlight=rbd%20cache">Ceph RBD Cache setting</a></code></p>

<h2>How to record log from RBD</h2>

<p>There is a little tricky to record log in RBD sides, because if you simply add the log settings in ceph.conf, you can only get logs when you do something using &ldquo;rbd&rdquo; command, (I just cannot remember what is the exact command, will add this later ), etc. So simply adding log settings in ceph.conf(client side) can not help you to get logs from QEMU to librbd, the reason is unknown to me, but I just find a way to walk around this.</p>

<p>All you need to do is to add log setting in you instance.xml, then using libvirt to boot this instance or also you can just attach a new disk by using xml like below.</p>

<figure class='code'><figcaption><span>disk.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;disk</span> <span class="na">type=</span><span class="s">&#39;network&#39;</span> <span class="na">device=</span><span class="s">&#39;disk&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;driver</span> <span class="na">name=</span><span class="s">&#39;qemu&#39;</span> <span class="na">type=</span><span class="s">&#39;raw&#39;</span> <span class="na">cache=</span><span class="s">&#39;none&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source</span> <span class="na">protocol=</span><span class="s">&#39;rbd&#39;</span> <span class="na">name=</span><span class="s">&#39;xcd_8osd/volume-3:debug_rbd=20:debug_objectcacher=20:log_file=/tmp/qemu-rbd.log&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;target</span> <span class="na">dev=</span><span class="s">&#39;vdb&#39;</span> <span class="na">bus=</span><span class="s">&#39;virtio&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;serial&gt;</span>12f70341-d199-4fca-9270-56e5d6b80061<span class="nt">&lt;/serial&gt;</span>
</span><span class='line'>  <span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">&#39;virtio-disk1&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;address</span> <span class="na">type=</span><span class="s">&#39;pci&#39;</span> <span class="na">domain=</span><span class="s">&#39;0x0000&#39;</span> <span class="na">bus=</span><span class="s">&#39;0x00&#39;</span> <span class="na">slot=</span><span class="s">&#39;0x06&#39;</span> <span class="na">function=</span><span class="s">&#39;0x0&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/disk&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>After attach this disk, you can find logs in /tmp/qemu-rbd.log or you can just write to qemu log.</p>

<figure class='code'><figcaption><span>write log to</span><a href='http://xuechendi.github.io/var/libvirt/qemu/xxxxx(instance_name).log'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;source</span> <span class="na">protocol=</span><span class="s">&#39;rbd&#39;</span> <span class="na">name=</span><span class="s">&#39;xcd_8osd/volume-3:debug_rbd=20:debug_objectcacher=20:log_to_stderr=true&#39;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a really clear codes path we can find from logs, so just using log to debug or hack into the rbd codes.</p>

<h2>Dig into the codes</h2>

<p>If we enable rbd cache in ceph.conf(client side), the ObjectCacher object is created when this rbd image attach to the vm.
Here is the overview.</p>

<p><img src="http://xuechendi.github.io/images/RBD_Cache/overview.png" width=60%></p>

<p>From above we can see each RBD has a object to store all information name ImageCtx(image context), so there is only one ObjectCacher in one RBD cache and also different RBD images can not share their cache till now.</p>

<p>ObjectCacher uses poolid, oid(objectid), then offset and length to index cache in memory.</p>

<p>Then here is a graph to show how ceph using ObjectCacher.</p>

<p><img src="http://xuechendi.github.io/images/RBD_Cache/workflow_send_req.png" width=100%></p>

<p><img src="http://xuechendi.github.io/images/RBD_Cache/workflow_recv_req.png" width=50%></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study of Data distribution methods--Crush]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/crush-ceph-object-distribution-method/"/>
    <updated>2013-11-15T00:51:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/crush-ceph-object-distribution-method</id>
    <content type="html"><![CDATA[<p>wanna learn, mark here</p>
]]></content>
  </entry>
  
</feed>
