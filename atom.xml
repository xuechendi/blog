<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[XueChendi]]></title>
  <link href="http://xuechendi.github.io/atom.xml" rel="self"/>
  <link href="http://xuechendi.github.io/"/>
  <updated>2013-11-18T13:24:57+08:00</updated>
  <id>http://xuechendi.github.io/</id>
  <author>
    <name><![CDATA[Chendi.Xue]]></name>
    <email><![CDATA[xuechendi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[System analysis and tools]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/system-analysis-and-tools/"/>
    <updated>2013-11-15T01:09:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/system-analysis-and-tools</id>
    <content type="html"><![CDATA[<h2>It&rsquo;s really clear of these 2 graph to reminds me all those tools can help to analyse the system</h2>

<h2>So happily sharing here ~~~</h2>

<p><img src="http://xuechendi.github.io/images/system_analysis_tools/overview.jpg" alt="overview" />
<img src="http://xuechendi.github.io/images/system_analysis_tools/tools.jpg" alt="overview" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AIO-STRESS vs. FIO]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/aio-stress-vs-fio/"/>
    <updated>2013-11-15T01:05:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/aio-stress-vs-fio</id>
    <content type="html"><![CDATA[<p>working in progress&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to break into Ceph Codes]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/how-to-break-into-ceph-codes/"/>
    <updated>2013-11-15T01:00:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/how-to-break-into-ceph-codes</id>
    <content type="html"><![CDATA[<p>Working in Progress, will be finished by this weekend</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectCacher: RBD Cache Codes]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/objectcacher-rbd-cache-codes/"/>
    <updated>2013-11-15T00:58:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/objectcacher-rbd-cache-codes</id>
    <content type="html"><![CDATA[<p>There is some cache mechanism in Ceph RBD.
And it is now in memory cache which supports write through and write back.</p>

<p>In this post, I would post what I have learnt from ObjectCacher codes.</p>

<h2>How to deploy RBD Cache</h2>

<p>there is a really clear instruction in ceph.com, just linked here <code><a href="http://ceph.com/docs/master/rbd/rbd-config-ref/?highlight=rbd%20cache">Ceph RBD Cache setting</a></code></p>

<h2>How to record log from RBD</h2>

<p>There is a little tricky to record log in RBD sides, because if you simply add the log settings in ceph.conf, you can only get logs when you do something using &ldquo;rbd&rdquo; command, like &ldquo;rbd lspools&rdquo;, etc. So simply adding log settings in ceph.conf(client side) can not help you to get logs from QEMU to librbd, the reason is unknown to me, but I just find a way to walk around this.</p>

<p>All you need to do is to add log setting in you instance.xml, then using libvirt to boot this instance or also you can just attach a new disk by using xml like below.</p>

<figure class='code'><figcaption><span>disk.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;disk <span class="nb">type</span><span class="o">=</span><span class="s1">&#39;network&#39;</span> <span class="nv">device</span><span class="o">=</span><span class="s1">&#39;disk&#39;</span>&gt;
</span><span class='line'>  &lt;driver <span class="nv">name</span><span class="o">=</span><span class="s1">&#39;qemu&#39;</span> <span class="nb">type</span><span class="o">=</span><span class="s1">&#39;raw&#39;</span> <span class="nv">cache</span><span class="o">=</span><span class="s1">&#39;none&#39;</span>/&gt;
</span><span class='line'>  &lt;<span class="nb">source </span><span class="nv">protocol</span><span class="o">=</span><span class="s1">&#39;rbd&#39;</span> <span class="nv">name</span><span class="o">=</span><span class="s1">&#39;xcd_8osd/volume-3:debug_rbd=20:debug_objectcacher=20:log_file=/tmp/qemu-rbd.log&#39;</span>/&gt;
</span><span class='line'>  &lt;target <span class="nv">dev</span><span class="o">=</span><span class="s1">&#39;vdb&#39;</span> <span class="nv">bus</span><span class="o">=</span><span class="s1">&#39;virtio&#39;</span>/&gt;
</span><span class='line'>  &lt;serial&gt;12f70341-d199-4fca-9270-56e5d6b80061&lt;/serial&gt;
</span><span class='line'>  &lt;<span class="nb">alias </span><span class="nv">name</span><span class="o">=</span><span class="s1">&#39;virtio-disk1&#39;</span>/&gt;
</span><span class='line'>  &lt;address <span class="nb">type</span><span class="o">=</span><span class="s1">&#39;pci&#39;</span> <span class="nv">domain</span><span class="o">=</span><span class="s1">&#39;0x0000&#39;</span> <span class="nv">bus</span><span class="o">=</span><span class="s1">&#39;0x00&#39;</span> <span class="nv">slot</span><span class="o">=</span><span class="s1">&#39;0x06&#39;</span> <span class="k">function</span><span class="o">=</span><span class="s1">&#39;0x0&#39;</span>/&gt;
</span><span class='line'>&lt;/disk&gt;
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>After attach this disk, you can find logs in /tmp/qemu-rbd.log or you can just write to qemu log.</p>

<figure class='code'><figcaption><span>write log to</span><a href='http://xuechendi.github.io/var/libvirt/qemu/xxxxx(instance_name).log'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &lt;<span class="nb">source </span><span class="nv">protocol</span><span class="o">=</span><span class="s1">&#39;rbd&#39;</span> <span class="nv">name</span><span class="o">=</span><span class="s1">&#39;xcd_8osd/volume-3:debug_rbd=20:debug_objectcacher=20:log_to_stderr=true&#39;</span>/&gt;
</span></code></pre></td></tr></table></div></figure>


<p>There is a really clear codes path we can find from logs, so just using log to debug or hack into the rbd codes.</p>

<h2>Dig into the codes</h2>

<p>If we enable rbd cache in ceph.conf(client side), the ObjectCacher object is created when this rbd image attach to the vm.
Here is the overview.</p>

<p><img src="http://xuechendi.github.io/images/RBD_Cache/overview.PNG" width=60%></p>

<p>From above we can see each RBD has a object to store all information name ImageCtx(image context), so there is only one ObjectCacher in one RBD cache and also different RBD images can not share their cache till now.</p>

<p>ObjectCacher uses poolid, oid(objectid), then offset and length to index cache in memory.</p>

<p>Then here is a graph to show how ceph using ObjectCacher.</p>

<p><img src="http://xuechendi.github.io/images/RBD_Cache/workflow_send_req.PNG" width=100%></p>

<p><img src="http://xuechendi.github.io/images/RBD_Cache/workflow_recv_req.PNG" width=50%></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cache &amp; Consistency]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/cache-and-consistency/"/>
    <updated>2013-11-15T00:55:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/cache-and-consistency</id>
    <content type="html"><![CDATA[<p>Working in Progress, will be finished by this week</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Study of Data distribution methods--Crush]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/crush-ceph-object-distribution-method/"/>
    <updated>2013-11-15T00:51:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/crush-ceph-object-distribution-method</id>
    <content type="html"><![CDATA[<p>wanna learn, mark here</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Device-Mapper deep dive]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/14/device-mapper-deep-dive/"/>
    <updated>2013-11-14T19:40:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/14/device-mapper-deep-dive</id>
    <content type="html"><![CDATA[<p>I used to stuck in all these terms and concepts for like really long time, just trying to get everything clear by writing.</p>

<h2>Storage subsystem</h2>

<h3>Overview</h3>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/overview.png" alt="overview" width=80%></p>

<p>BIO is the unit to map data in the memory to generic block offset.
When generic block layer gets bio units, it calls io scheduler to combine bios into request to specific device.
Then requests can be sent to real device or virtual block device like software raid or logic volume(using MD or Device Mapper modules).</p>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/bio.png" alt="bio" width=80%></p>

<p>Actually BIO units point to a much smaller unit named bio_vec which is the exactly unit point to the memory, and BIO also has one field record which block device and which sector it wanna to read/write.(Notice, the block device here is kind of a generic idea, could be some virtual block device)</p>

<p>The smart use of bio_vec help kernel to support scatter/Gather I/O, so that BIO can map some scatter part in mem to some continuous part in block device.</p>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/request.png" alt="request" width=80%></p>

<p>When BIO unit received by generic block layer, kernel will do some &ldquo;merge and sort&rdquo; operations then hand the combined BIOs to block device. All these work can be done in the IO scheduler layer and then all BIO units are combined into one and one request, which also be linked by a pointer named &ldquo;request_queue&rdquo; store in bdev struct(gendisk).</p>

<p>Then the whole idea is pretty clear, there is a picture shows some important function to translate a fs syscall into requests to block devices.</p>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/functions.png" alt="functions" width=50%></p>

<p>Submit_bio is a generic api to submit bio to generic block layer(of course by its name&hellip;)</p>

<p>generic_make_request puts BIO into bio_list, then __generic_make_request will see if this bio is suitable to make request or it is delivered to some stack device like Device Mapper(in this situation, __generic_make_request will produce a new bio and call generic_make_request).</p>

<p>__make_request_fn() then pus BIO into request_queue, if this function returns 0, the BIO is delivered to the real block device, or it may continues to call __make_request_fn until it delivered to real block device(like Device Mapper).</p>

<p>In fact, the request_queue also will not be directly tackled by block device, the device will use some method named &ldquo;Plugging/Unplugging&rdquo; to tackles these requests.</p>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/structures.png" alt="structures" width=50%></p>

<p>Now let&rsquo;s see a linked graph of some important structs in block-level subsystem. Every block device has a field named gendisk(generic disk), and generic disk has a field to record its request_queue, and since each type of block device has its own implementation of read and write, the gendisk also has a field named private_data to point to the corresponding block device(also, the block device can be real or virtual).</p>

<h2>Then, after all the general idea of block-layer subsystem, let&rsquo;s talk about <code>Device Mapper</code></h2>

<h3>What is Device-Mapper</h3>

<ul>
<li>A block device mapping facility available in Linux Kernel.</li>
<li>A component required by LVM2 to support the mapping between logical volumes and physical storage devices.</li>
<li>Device-mapper provides a generic way to create virtual layers of block devices that can do different things on top of real block devices like striping, concatenation, mirroring, snapshotting, etc&hellip;</li>
</ul>


<h3>Here is the Usecase</h3>

<p>Before lv creation</p>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/Before lv creation.png" alt="Before lv creation" width=40%></p>

<p>After lv creation</p>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/after lv creation.png" alt="after lv creation" width=40%></p>

<p>The thing should notice here is that a dm-0 device in /sys/block is created, which indicates that Logic Volume is a &ldquo;device mapper&rdquo; device.</p>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/after lv creation2.png" alt="after lv creation" width=40%></p>

<h3>another device mapper usecase</h3>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/dm_usecase2.png" alt="dm_usecase2" width=60%></p>

<h3>Here is the Device Mapper Overview</h3>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/dm_overview.png" alt="dm_overview" width=50%></p>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/dm_struct.png" alt="dm_struct" width=50%></p>

<p>DM Devices in Ubuntu 12.10,kernel 3.6.3</p>

<p><img src="http://xuechendi.github.io/images/dm_deep_dive/dm_targets.png" alt="dm_targets" width=50%></p>

<p>Linear Device target-type example</p>

<figure class='code'><figcaption><span>linear-device-struct</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">target_type</span> <span class="n">linear_target</span> <span class="o">=</span> <span class="p">{</span><span class="err">   </span>
</span><span class='line'>  <span class="p">.</span><span class="n">name</span><span class="err">   </span><span class="o">=</span> <span class="s">&quot;linear&quot;</span><span class="p">,</span><span class="err">   </span>
</span><span class='line'>  <span class="p">.</span><span class="n">version</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span><span class="err">   </span>
</span><span class='line'>  <span class="p">.</span><span class="n">module</span> <span class="o">=</span> <span class="n">THIS_MODULE</span><span class="p">,</span><span class="err">   </span>
</span><span class='line'>  <span class="p">.</span><span class="n">ctr</span><span class="err">    </span><span class="o">=</span> <span class="n">linear_ctr</span><span class="p">,</span><span class="err">   </span>
</span><span class='line'>  <span class="p">.</span><span class="n">dtr</span><span class="err">    </span><span class="o">=</span> <span class="n">linear_dtr</span><span class="p">,</span><span class="err">   </span>
</span><span class='line'>  <span class="p">.</span><span class="n">map</span><span class="err">    </span><span class="o">=</span> <span class="n">linear_map</span><span class="p">,</span><span class="err">   </span>
</span><span class='line'>  <span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">linear_status</span><span class="p">,</span><span class="err">   </span>
</span><span class='line'>  <span class="p">.</span><span class="n">ioctl</span><span class="err">  </span><span class="o">=</span> <span class="n">linear_ioctl</span><span class="p">,</span><span class="err">   </span>
</span><span class='line'>  <span class="p">.</span><span class="n">merge</span><span class="err">  </span><span class="o">=</span> <span class="n">linear_merge</span><span class="p">,</span><span class="err">   </span>
</span><span class='line'>  <span class="p">.</span><span class="n">iterate_devices</span> <span class="o">=</span> <span class="n">linear_iterate_devices</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Let&rsquo;s see the codes</h3>

<figure class='code'><figcaption><span>How DM handle the device creation command?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">dm_create</span><span class="p">(</span><span class="kt">int</span> <span class="n">minor</span><span class="p">,</span> <span class="k">struct</span> <span class="n">mapped_device</span> <span class="o">**</span><span class="n">result</span><span class="p">){</span>
</span><span class='line'><span class="err">   </span>   <span class="k">struct</span> <span class="n">mapped_device</span> <span class="o">*</span><span class="n">md</span><span class="p">;</span>
</span><span class='line'>      <span class="n">md</span> <span class="o">=</span> <span class="n">alloc_dev</span><span class="p">(</span><span class="n">minor</span><span class="p">);</span><span class="err">   </span> 
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">md</span><span class="p">)</span><span class="err">       </span>      
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="n">ENXIO</span><span class="p">;</span><span class="err"> </span>   
</span><span class='line'>  <span class="n">dm_sysfs_init</span><span class="p">(</span><span class="n">md</span><span class="p">);</span><span class="err">   </span>   
</span><span class='line'>  <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">md</span><span class="p">;</span><span class="err">   </span> 
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>How DM handle the read/write command? </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">dm_request</span><span class="p">(</span><span class="k">struct</span> <span class="n">request_queue</span> <span class="o">*</span><span class="n">q</span><span class="p">,</span> <span class="k">struct</span> <span class="n">bio</span> <span class="o">*</span><span class="n">bio</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">mapped_device</span> <span class="o">*</span><span class="n">md</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">queuedata</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dm_request_based</span><span class="p">(</span><span class="n">md</span><span class="p">))</span>
</span><span class='line'>      <span class="n">blk_queue_bio</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">bio</span><span class="p">);</span>  <span class="c1">//Using dm_target rules to reconstruct the bio</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">_dm_request</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">bio</span><span class="p">);</span>    <span class="c1">//split and process this bio</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[resume]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/14/resume/"/>
    <updated>2013-11-14T14:08:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/14/resume</id>
    <content type="html"><![CDATA[<h1>Xue Chendi (薛晨笛)
<a href ="http://xuechendi.github.io/downloads/Resume_XueChendi.pdf"><code style="font-family: 'Fjalla One','Georgia','Helvetica Neue',Arial,sans-serif;font-weight:900;font-size:12px;">download the resume</code></a>
</h1>


<h3>0086-18600035546; xuechendi@gmail.com</h3>


<br>


<hr>


<h2>SKILLS</h2>


<ul>
    <li>Linux kernel/module programming experience</li>
    <li>PHP-based website development experience</li>
    <li>Familiar with block-level storage subsystem (iSCSI and Device-Mapper) </li>
    <li>Linux system operating maintenance experience</li>
    <li>CET-6(556)、IELTS(6.5)</li>
</ul>


<br>


<hr>


<h2>EDUCATION</h2>


<div style="width:100%;">
    <div style="width:20%;">2011.9 - Present</div>
    <div style="width:80%;padding-left:5%;">
        <ul>
            <li>Communication University of China</li>
            <li>Masters of Computer software and theory</li>
            <li>Concentration in Distributed storage, ranking 1st at first year&#8217;s courses learning</li>
        </ul>
    </div>
    <div style="width:20%;">2007.9 - 2011.7</div>
    <div style="width:80%;padding-left:5%;">
        <ul>
            <li>Communication University of China</li>
            <li>Major in computer science and technology with GPA of 3.61.</li>
            <li>Minor in Digital Art, college of Animation.</li>
        </ul>
    </div>
</div>


<br>


<hr>


<h2>PROJECT EXPERIENCE</h2>


<div style="width:100%;">
    <div style="width:20%;">2011.7 - Present</div>
    <div style="width:80%;padding-left:5%;">
        <ul>
            <li>Low energy-consuming storage devices development and industrialization</li>
            <li>National science and technology support program(2011BAH04B05)</li>
            <li>Develop a storage management system based on B/S architecture to integrate main Linux storage APIs and also do some optimization to help system administrators to setup raid, LV,iSCSI devices, FC devices, NFS, and CIFS, also manage basic service operations.</li>
        </ul>
    </div>
    <div style="width:20%;">2010.1 - 2011.6</div>
    <div style="width:80%;padding-left:5%;">
        <ul>
            <li>Research of semantic storage system for MP3</li>
            <li>National undergraduate innovation project</li>
            <li>Develop a system that stores MP3 files and metadata separately, then uses metadata/tags to build a RDF triples that can do semantic search of files. In order to optimise the search speed, the system also uses the fast-page mechanism.</li>
        </ul>
    </div>
</div>


<br>


<hr>


<h2>ACADEMIC ACHEIVEMENT</h2>


<div style="width:100%;">
    <div style="width:20%;">2013</div>
    <div style="width:80%;padding-left:5%;">
        <ul>
            <li>《The Optimization of network link aggregation for iSCSI》</li>
            <li>As the first and primary author</li>
            <li>Accepted by The 19th National Conference of Information Storage 2013</li>
        </ul>
    </div>
    <div style="width:20%;">2011</div>
    <div style="width:80%;padding-left:5%;">
        <ul>
            <li>《Research of semantic storage system for MP3》</li>
            <li>As the first and primary author</li>
            <li>IEEE Digital Object Identifier: 10.1109/CECNET.2011.5768656</li>
        </ul>
    </div>
</div>


<br>


<hr>


<h2>INTERNSHIP</h2>


<div style="width:100%;">
    <div style="width:20%;">2013</div>
    <div style="width:80%;padding-left:5%;">
        <ul>
            <li>INTEL R&D CENTER , SSG/SOTC</li>
            <li>Daily work mainly concentrate on CEPH testing and tuning</li>
            <li>Community contribution mainly focus on Openstack-cinder</li>
        </ul>
    </div>
</div>


<br>


<hr>


<h2>SCHOOL ACTIVITY</h2>


<div style="width:100%;">
    <div style="width:20%;">2008</div>
    <div style="width:80%;padding-left:5%;">
        <li>Leader of Part-time Job Service Propaganda Department</li>
    </div>
</div>


<br>


<hr>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aboutme]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/14/aboutme/"/>
    <updated>2013-11-14T11:01:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/14/aboutme</id>
    <content type="html"><![CDATA[<p>Hi, This is Chendi.Xue, a girl from China and have huge interest in Storage.
I am building this website to share stuff I am into.
Please feel free to contact me in any reason ~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First post to Octopress]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/13/first-post-to-octopress/"/>
    <updated>2013-11-13T00:34:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/13/first-post-to-octopress</id>
    <content type="html"><![CDATA[<h1>This is XueChendi</h1>

]]></content>
  </entry>
  
</feed>
