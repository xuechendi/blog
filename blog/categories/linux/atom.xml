<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | XueChendi]]></title>
  <link href="http://xuechendi.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://xuechendi.github.io/"/>
  <updated>2013-12-06T16:54:21+08:00</updated>
  <id>http://xuechendi.github.io/</id>
  <author>
    <name><![CDATA[Chendi.Xue]]></name>
    <email><![CDATA[xuechendi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DRBD and Heartbeat]]></title>
    <link href="http://xuechendi.github.io/blog/2013/12/04/drbd-and-heartbeat/"/>
    <updated>2013-12-04T19:07:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/12/04/drbd-and-heartbeat</id>
    <content type="html"><![CDATA[<p>These days, need to deploy a HA solution in our setup, and just write all these down helping the next time deployment.</p>

<h2>The Overview</h2>

<p><img src="/images/HA/IMG_0045.PNG" alt="overview" width=80%></p>

<p>Here we have 2 setups, providing both web service for management and iscsi target service.
What we wanna have is all the LVs in setup1(222.31.76.144) has a mirror in setup2(222.31.76.228) &mdash; so we need DRBD
Then we use LV1 as lun0 to provide iscsi disk to client1, all client1 knows is that his iscsi target provider&rsquo;s ip address is 222.31.76.250(may be setup1 or setup2) &mdash; so we need heartbeat. Basically, setup1 will response to the client&rsquo;s request, only when setup&rsquo;s eth0 nic doesn&rsquo;t work(this will happen when setup1 is down), setup2 will continue to provide web service and iscsi service.</p>

<p>Ok, another problem, when we need setup2 can continue to provide iscsi service, we need disks in setup to can also be the primary node in drbd semantic, so when data written to setup2, data can be sync to setup1.</p>

<p>Let&rsquo;s just summary all the requirement here:
1. Using heartbeat to provide a virtual ip 222.31.76.250 and watch the liveness of both setups.
2. Using DRBD to sync LVs in setup1 and setup2, the syncronization can be both sides(dual primary).
3. Need to keep in mind, when the sync link(eth0,192.168.1.*) breaks, there will be a split brain situation in our DRBD setting, so we need to record who is the latest iscsi target provider and use that one to recover the DRBD setting.</p>

<h2>DRBD setting</h2>

<p>1.The installation
we need to install two parts of DRBD, the kmod who is the real implementation of drbd, and the drbdadm, which helps a lot to manage the drbd service.</p>

<p><code>bash drbd rpm
drbd83-8.3.15-2.el5.centos.x86_64.rpm       kmod-drbd83-8.3.15-3.el5.centos.x86_64.rpm
</code></p>

<p>2.The drbd config file
We can start from the drbd conf file /etc/drbd.conf</p>

<p>``` bash /etc/drbd.conf
#</p>

<h1>please have a a look at the example configuration file in</h1>

<h1>/usr/share/doc/drbd83/drbd.conf</h1>

<p>#
include &ldquo;drbd.d/global_common.conf&rdquo;;
include &ldquo;drbd.d/*.res&rdquo;;
```</p>

<p>As we can see, in this config file,it include a global_common.conf and *.res
The first one writes some common setting for drbd, things like the sync protocol(Async, semi-sync, sync), net rate setting, blah, blah&hellip;
The second one is what we need to build our resource, the config will be like below:</p>

<p>``` bash mpx.res
resource mpx {</p>

<pre><code>protocol C; 
net {
    allow-two-primaries; 
  }
syncer {
      rate 1024M;  //sync bandwidth
 }
on super {
    device /dev/drbd0;
    disk /dev/raid0/lv01;
    address 192.168.1.100:7789;
    meta-disk internal;        
}
on MPXHA {
    device /dev/drbd0;
    disk /dev/vg01/lv01;
    address 192.168.1.152:7789;
    meta-disk internal;        
}
</code></pre>

<p>}
```</p>

<p>The protocol part says we will use sync method in this resource
The net part says both nodes can be primary
The last two parts describe the drbd device and the nic they used to sync data(Here we can direclty connect two setup by ethernet line.)</p>

<p>The above *.res should has replication both in setup1 and setup2
After that there is few command we need to first time build this DRBD resource.</p>

<p>``` bash first building drbd resource
drbdadm create-md mpx // this should be done both in setup1 and setup2
service drbd restart // both in setup1 and setup2</p>

<p>drbdadm primary &mdash;force resource // only in setup1</p>

<p>drbd-overview // can be done both in setup1 or setup2, here I did in setup2
drbd driver loaded OK; device status:
version: 8.3.11 (api:88/proto:86-96)
srcversion: 2D876214BAAD53B31ADC1D6
m:res  cs          ro                 ds
0:mpx  SyncTarget  Secondary/Primary  Inconsistent/UpToDate  C
&hellip;    sync'ed:    25.4%              (1373576/1837720)K</p>

<p>&hellip; wait until</p>

<p>drbd driver loaded OK; device status:
version: 8.3.11 (api:88/proto:86-96)
srcversion: 2D876214BAAD53B31ADC1D6
m:res  cs         ro                 ds                 p  mounted  fstype
0:mpx  Connected  Secondary/Primary  UpToDate/UpToDate  C</p>

<p>drbdadm primary mpx // in setup2
drbd-overview
drbd driver loaded OK; device status:
version: 8.3.11 (api:88/proto:86-96)
srcversion: 2D876214BAAD53B31ADC1D6
m:res  cs         ro               ds
0:mpx  Connected  Primary/Primary  UpToDate/UpToDate  C
```</p>

<p>Here is when we use drbd sevice as iscsi lun,yeah, you need this copy both in setup1 and setup2</p>

<p>``` bash scst.conf</p>

<h1>Automatically generated by SCST Configurator v2.2.0.</h1>

<p>HANDLER vdisk_fileio {</p>

<pre><code>DEVICE vg01_lv01 {
    filename /dev/drbd0 // ￼ drbd 
}
</code></pre>

<p>}
TARGET_DRIVER iscsi {</p>

<pre><code>enabled 1
TARGET iqn.2011-1212.edu.cuc.storagelab:mpx.target1 {
    cpu_mask 0000ff
    enabled 1
    rel_tgt_id 1
    GROUP xcd {
        LUN 0 vg01_lv01
        INITIATOR iqn.2012-12.cn.edu.cuc.xcd:1234567
        INITIATOR iqn.1991-05.com.microsoft:win-p56rroe0srf
        cpu_mask 0000ff
    }
} 
</code></pre>

<p>}
```</p>

<h2>Heartbeat setting</h2>

<ol>
<li>The installation
Seems we can not simply get heartbeat in yum
Here is the solution</li>
</ol>


<p>``` console heartbeat installation
Step-1 : Make download folder under the root.
[root@setup1 download]# mkdir /download
[root@setup1 download]# cd /download/
Step-2 : Download EPEL repository.
[root@setup1 download]# wget <a href="ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/6rolling/i386/os/Packages/epel-release-6-5.noarch.rpm">ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/6rolling/i386/os/Packages/epel-release-6-5.noarch.rpm</a>
Step-3 : Install Epel RPM.
rpm -ivUh epel-release-6-5.noarch.rpm
warning: epel-release-6-5.noarch.rpm: Header V4 DSA/SHA1 Signature, key ID 192a7d7d: NOKEY
Preparing&hellip;                ########################################### [100%]
   1:epel-release           ########################################### [100%]
Step-4 : Edit epel.repo file ‘/etc/yum.repos.d/epel.repo’ change the line # 6 ‘enable=1 to enable=0′.
[root@setup1 download]# vi /etc/yum.repos.d/epel.repo
[epel]
name=Extra Packages for Enterprise Linux 6 &ndash; $basearch</p>

<h1>baseurl=<a href="http://download.fedoraproject.org/pub/epel/6/$basearch">http://download.fedoraproject.org/pub/epel/6/$basearch</a></h1>

<p>mirrorlist=<a href="http://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;amp;arch=$basearch">http://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;amp;arch=$basearch</a>
failovermethod=priority
enabled=0
CentOS 6 :<br/>
Step-5 : Now we are ready to install Heartbeat with yum command.
[root@setup1 download]# yum &mdash;enablerepo=epel install heartbeat
```</p>

<ol>
<li>The setting</li>
</ol>


<p><code>console
[root@setup1&amp;setup2 download]# cp /usr/share/doc/heartbeat-3.0.4/ha.cf /etc/ha.d/
[root@setup1&amp;setup2 download]# cp /usr/share/doc/heartbeat-3.0.4/haresources /etc/ha.d/
[root@setup1&amp;setup2 download]# cp /usr/share/doc/heartbeat-3.0.4/authkeys /etc/ha.d/
[root@setup1 download]# vim /etc/ha.d/ha.cf
debugfile /var/log/ha-debug
keepalive 2
deadtime 10
warntime 6
initdead 120
udpport 694
ucast eth0 222.31.76.228
node   super
node   MPXHA
auto_failback on
respawn hacluster /usr/lib64/heartbeat/ipfail
[root@setup2 download]# vim /etc/ha.d/ha.cf
debugfile /var/log/ha-debug
keepalive 2
deadtime 10
warntime 6
initdead 120
udpport 694
ucast eth0 222.31.76.144
node   super
node   MPXHA
auto_failback on
respawn hacluster /usr/lib64/heartbeat/ipfail
[root@setup1&amp;setup2 download]# vim /etc/ha.d/haresouces
super IPaddr::222.31.76.250/24/eth0
[root@setup1&amp;setup2 download]# service heartbeat restart
</code></p>

<h2>There is also one problem we mentioned before called &ldquo;split brain&rdquo;, here is the way to solve this situation</h2>

<p>This situation happens when the eth0(the link used to sync data beween drbd resources are broken), and both drbd will see itself as primary and the other as unknown</p>

<p><code>console when split brain happens
[root@super ~]# service drbd status
drbd driver loaded OK; device status:
version: 8.3.11 (api:88/proto:86-96)
srcversion: 2D876214BAAD53B31ADC1D6
m:res  cs          ro               ds                 p       mounted  fstype
0:mpx  StandAlone  Primary/Unknown  UpToDate/DUnknown  r-----
</code></p>

<p>The way to tackle this problem when both drbd device also act as the iscsi lun</p>

<p>```console How to solve split brain problem
service scst stop
drbdadm secondary mpx
drbdadm disconnect mpx
drbdadm &mdash; &mdash;discard-my-data connect mpx
ssh 222.31.76.144 &ldquo;drbdadm connect mpx&rdquo;</p>

<p>service drbd status</p>

<p>drbd driver loaded OK; device status:
version: 8.3.11 (api:88/proto:86-96)
srcversion: 2D876214BAAD53B31ADC1D6
m:res  cs          ro                 ds
0:mpx  SyncTarget  Secondary/Primary  Inconsistent/UpToDate  C
&hellip;    sync'ed:    25.4%              (1373576/1837720)K</p>

<p>drbd driver loaded OK; device status:
version: 8.3.11 (api:88/proto:86-96)
srcversion: 2D876214BAAD53B31ADC1D6
m:res  cs         ro                 ds                 p  mounted  fstype
0:mpx  Connected  Secondary/Primary  UpToDate/UpToDate  C</p>

<p>drbdadm primary mpx</p>

<p>drbd driver loaded OK; device status:
version: 8.3.11 (api:88/proto:86-96)
srcversion: 2D876214BAAD53B31ADC1D6
m:res  cs         ro               ds
0:mpx  Connected  Primary/Primary  UpToDate/UpToDate  C</p>

<p>service scst start
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System analysis and tools]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/15/system-analysis-and-tools/"/>
    <updated>2013-11-15T01:09:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/15/system-analysis-and-tools</id>
    <content type="html"><![CDATA[<h2>It&rsquo;s really clear of these 2 graphs to remind me all those tools can help to analyse the system</h2>

<h2>So happily sharing here ~~~</h2>

<p><img src="/images/system_analysis_tools/overview.jpg" alt="overview" />
<img src="/images/system_analysis_tools/tools.jpg" alt="overview" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Device-Mapper deep dive]]></title>
    <link href="http://xuechendi.github.io/blog/2013/11/14/device-mapper-deep-dive/"/>
    <updated>2013-11-14T19:40:00+08:00</updated>
    <id>http://xuechendi.github.io/blog/2013/11/14/device-mapper-deep-dive</id>
    <content type="html"><![CDATA[<p>I used to stuck in all these terms and concepts for like really long time, just trying to get everything clear by writing.</p>

<h2>Storage subsystem</h2>

<h3>Overview</h3>

<p><img src="/images/dm_deep_dive/overview.png" alt="overview" width=80%></p>

<p>BIO is the unit to map data in the memory to generic block offset.
When generic block layer gets bio units, it calls io scheduler to combine bios into request to specific device.
Then requests can be sent to real device or virtual block device like software raid or logic volume(using MD or Device Mapper modules).</p>

<p><img src="/images/dm_deep_dive/bio.png" alt="bio" width=80%></p>

<p>Actually BIO units point to a much smaller unit named bio_vec which is the exactly unit point to the memory, and BIO also has one field record which block device and which sector it wanna to read/write.(Notice, the block device here is kind of a generic idea, could be some virtual block device)</p>

<p>The smart use of bio_vec help kernel to support scatter/Gather I/O, so that BIO can map some scatter part in mem to some continuous part in block device.</p>

<p><img src="/images/dm_deep_dive/request.png" alt="request" width=80%></p>

<p>When BIO unit received by generic block layer, kernel will do some &ldquo;merge and sort&rdquo; operations then hand the combined BIOs to block device. All these work can be done in the IO scheduler layer and then all BIO units are combined into one and one request, which also be linked by a pointer named &ldquo;request_queue&rdquo; store in bdev struct(gendisk).</p>

<p>Then the whole idea is pretty clear, there is a picture shows some important function to translate a fs syscall into requests to block devices.</p>

<p><img src="/images/dm_deep_dive/functions.png" alt="functions" width=50%></p>

<p>Submit_bio is a generic api to submit bio to generic block layer(of course by its name&hellip;)</p>

<p>generic_make_request puts BIO into bio_list, then __generic_make_request will see if this bio is suitable to make request or it is delivered to some stack device like Device Mapper(in this situation, __generic_make_request will produce a new bio and call generic_make_request).</p>

<p>__make_request_fn() then pus BIO into request_queue, if this function returns 0, the BIO is delivered to the real block device, or it may continues to call __make_request_fn until it delivered to real block device(like Device Mapper).</p>

<p>In fact, the request_queue also will not be directly tackled by block device, the device will use some method named &ldquo;Plugging/Unplugging&rdquo; to tackles these requests.</p>

<p><img src="/images/dm_deep_dive/structures.png" alt="structures" width=50%></p>

<p>Now let&rsquo;s see a linked graph of some important structs in block-level subsystem. Every block device has a field named gendisk(generic disk), and generic disk has a field to record its request_queue, and since each type of block device has its own implementation of read and write, the gendisk also has a field named private_data to point to the corresponding block device(also, the block device can be real or virtual).</p>

<h2>Then, after all the general idea of block-layer subsystem, let&rsquo;s talk about <code>Device Mapper</code></h2>

<h3>What is Device-Mapper</h3>

<ul>
<li>A block device mapping facility available in Linux Kernel.</li>
<li>A component required by LVM2 to support the mapping between logical volumes and physical storage devices.</li>
<li>Device-mapper provides a generic way to create virtual layers of block devices that can do different things on top of real block devices like striping, concatenation, mirroring, snapshotting, etc&hellip;</li>
</ul>


<h3>Here is the Usecase</h3>

<p>Before lv creation</p>

<p><img src="/images/dm_deep_dive/Before lv creation.png" alt="Before lv creation" width=40%></p>

<p>After lv creation</p>

<p><img src="/images/dm_deep_dive/after lv creation.png" alt="after lv creation" width=40%></p>

<p>The thing should notice here is that a dm-0 device in /sys/block is created, which indicates that Logic Volume is a &ldquo;device mapper&rdquo; device.</p>

<p><img src="/images/dm_deep_dive/after lv creation2.png" alt="after lv creation" width=40%></p>

<h3>another device mapper usecase</h3>

<p><img src="/images/dm_deep_dive/dm_usecase2.png" alt="dm_usecase2" width=60%></p>

<h3>Here is the Device Mapper Overview</h3>

<p><img src="/images/dm_deep_dive/dm_overview.png" alt="dm_overview" width=50%></p>

<p><img src="/images/dm_deep_dive/dm_struct.png" alt="dm_struct" width=50%></p>

<p>DM Devices in Ubuntu 12.10,kernel 3.6.3</p>

<p><img src="/images/dm_deep_dive/dm_targets.png" alt="dm_targets" width=50%></p>

<p>Linear Device target-type example</p>

<p>``` c linear-device-struct
static struct target_type linear_target = {   </p>

<pre><code>.name   = "linear",   
.version = {1, 1, 0},   
.module = THIS_MODULE,   
.ctr    = linear_ctr,   
.dtr    = linear_dtr,   
.map    = linear_map,   
.status = linear_status,   
.ioctl  = linear_ioctl,   
.merge  = linear_merge,   
.iterate_devices = linear_iterate_devices,
</code></pre>

<p>}
```</p>

<h3>Let&rsquo;s see the codes</h3>

<p>``` c How DM handle the device creation command?
int dm_create(int minor, struct mapped_device <em>*result){
     struct mapped_device </em>md;</p>

<pre><code>    md = alloc_dev(minor);       
if (!md)             
    return -ENXIO;     
dm_sysfs_init(md);       
*result = md;    
return 0;
</code></pre>

<p>}
```</p>

<p>``` c How DM handle the read/write command?
static void dm_request(struct request_queue <em>q, struct bio </em>bio)
{</p>

<pre><code>struct mapped_device *md = q-&gt;queuedata;

if (dm_request_based(md))
    blk_queue_bio(q, bio);  //Using dm_target rules to reconstruct the bio
else
    _dm_request(q, bio);    //split and process this bio
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
